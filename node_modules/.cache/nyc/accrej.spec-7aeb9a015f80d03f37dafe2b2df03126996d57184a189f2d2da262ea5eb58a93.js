function cov_27fiovgj30(){var path="/home/teja/saiteja/minor_pro/test/accrej.spec.js";var hash="b7cb03edc37e56887a9104941762bad60d6d118b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/test/accrej.spec.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:19},end:{line:3,column:23}},"3":{start:{line:4,column:14},end:{line:4,column:30}},"4":{start:{line:5,column:31},end:{line:5,column:74}},"5":{start:{line:6,column:26},end:{line:6,column:67}},"6":{start:{line:8,column:0},end:{line:8,column:19}},"7":{start:{line:10,column:0},end:{line:85,column:3}},"8":{start:{line:11,column:4},end:{line:35,column:7}},"9":{start:{line:12,column:20},end:{line:16,column:9}},"10":{start:{line:17,column:20},end:{line:20,column:9}},"11":{start:{line:23,column:39},end:{line:23,column:51}},"12":{start:{line:24,column:8},end:{line:24,column:55}},"13":{start:{line:25,column:8},end:{line:25,column:55}},"14":{start:{line:26,column:8},end:{line:26,column:55}},"15":{start:{line:29,column:8},end:{line:29,column:31}},"16":{start:{line:32,column:8},end:{line:32,column:54}},"17":{start:{line:33,column:8},end:{line:33,column:47}},"18":{start:{line:34,column:8},end:{line:34,column:161}},"19":{start:{line:62,column:4},end:{line:84,column:7}},"20":{start:{line:63,column:20},end:{line:67,column:9}},"21":{start:{line:68,column:20},end:{line:71,column:9}},"22":{start:{line:74,column:39},end:{line:74,column:51}},"23":{start:{line:75,column:8},end:{line:75,column:64}},"24":{start:{line:78,column:8},end:{line:78,column:31}},"25":{start:{line:81,column:8},end:{line:81,column:54}},"26":{start:{line:82,column:8},end:{line:82,column:47}},"27":{start:{line:83,column:8},end:{line:83,column:111}},"28":{start:{line:87,column:0},end:{line:111,column:3}},"29":{start:{line:88,column:4},end:{line:110,column:7}},"30":{start:{line:89,column:20},end:{line:93,column:9}},"31":{start:{line:94,column:20},end:{line:97,column:9}},"32":{start:{line:100,column:34},end:{line:100,column:46}},"33":{start:{line:101,column:8},end:{line:101,column:37}},"34":{start:{line:104,column:8},end:{line:104,column:31}},"35":{start:{line:107,column:8},end:{line:107,column:54}},"36":{start:{line:108,column:8},end:{line:108,column:47}},"37":{start:{line:109,column:8},end:{line:109,column:119}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:10,column:30},end:{line:10,column:31}},loc:{start:{line:10,column:36},end:{line:85,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:106},end:{line:11,column:107}},loc:{start:{line:11,column:118},end:{line:35,column:5}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:62,column:87},end:{line:62,column:88}},loc:{start:{line:62,column:99},end:{line:84,column:5}},line:62},"3":{name:"(anonymous_3)",decl:{start:{line:87,column:30},end:{line:87,column:31}},loc:{start:{line:87,column:36},end:{line:111,column:1}},line:87},"4":{name:"(anonymous_4)",decl:{start:{line:88,column:81},end:{line:88,column:82}},loc:{start:{line:88,column:93},end:{line:110,column:5}},line:88}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b7cb03edc37e56887a9104941762bad60d6d118b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_27fiovgj30=function(){return actualCoverage;};}return actualCoverage;}cov_27fiovgj30();const chai=(cov_27fiovgj30().s[0]++,require('chai'));const chaiHttp=(cov_27fiovgj30().s[1]++,require('chai-http'));const{expect}=(cov_27fiovgj30().s[2]++,chai);const sinon=(cov_27fiovgj30().s[3]++,require('sinon'));const{indexFacesAndStore}=(cov_27fiovgj30().s[4]++,require('../controller/registerController'));const{accept,reject}=(cov_27fiovgj30().s[5]++,require('../controller/accrejController'));// Assuming your controller file name is yourController.js
cov_27fiovgj30().s[6]++;chai.use(chaiHttp);cov_27fiovgj30().s[7]++;describe('accept controller',()=>{cov_27fiovgj30().f[0]++;cov_27fiovgj30().s[8]++;it('should return success response for each id when indexFacesAndStore resolves with non-zero value',async()=>{cov_27fiovgj30().f[1]++;const req=(cov_27fiovgj30().s[9]++,{body:{ids:[1,2,3]}});const res=(cov_27fiovgj30().s[10]++,{status:sinon.stub().returnsThis(),send:sinon.stub()});// Stubbing the indexFacesAndStore method
const indexFacesAndStoreStub=(cov_27fiovgj30().s[11]++,sinon.stub());cov_27fiovgj30().s[12]++;indexFacesAndStoreStub.withArgs(1).resolves(1);cov_27fiovgj30().s[13]++;indexFacesAndStoreStub.withArgs(2).resolves(1);cov_27fiovgj30().s[14]++;indexFacesAndStoreStub.withArgs(3).resolves(1);// Call the controller function
cov_27fiovgj30().s[15]++;await accept(req,res);// Assert the response
cov_27fiovgj30().s[16]++;expect(res.status.calledWith(200)).to.be.true;cov_27fiovgj30().s[17]++;expect(res.send.calledOnce).to.be.true;cov_27fiovgj30().s[18]++;expect(res.send.firstCall.args[0]).to.deep.equal(['1 1 is registered successfully','1 2 is registered successfully','1 3 is registered successfully']);});// it('should return failure response for each id when indexFacesAndStore resolves with 0', async () => {
//     const req = {
//         body: {
//             ids: [4, 5, 6]
//         }
//     };
//     const res = {
//         status: sinon.stub().returnsThis(),
//         send: sinon.stub()
//     };
//     // Stubbing the indexFacesAndStore method
//     const indexFacesAndStoreStub = sinon.stub();
//     indexFacesAndStoreStub.withArgs(4).resolves(0);
//     indexFacesAndStoreStub.withArgs(5).resolves(0);
//     indexFacesAndStoreStub.withArgs(6).resolves(0);
//     // Call the controller function
//     await accept(req, res);
//     // Assert the response
//     expect(res.status.calledWith(200)).to.be.true;
//     expect(res.send.calledOnce).to.be.true;
//     expect(res.send.firstCall.args[0]).to.deep.equal(['0 4 face cannot be registerd because same face is already present', '0 5 face cannot be registerd because same face is already present', '0 6 face cannot be registerd because same face is already present']);
// });
cov_27fiovgj30().s[19]++;it('should return failure response when indexFacesAndStore rejects with an error',async()=>{cov_27fiovgj30().f[2]++;const req=(cov_27fiovgj30().s[20]++,{body:{ids:[7,8,9]}});const res=(cov_27fiovgj30().s[21]++,{status:sinon.stub().returnsThis(),json:sinon.stub()});// Stubbing the indexFacesAndStore method
const indexFacesAndStoreStub=(cov_27fiovgj30().s[22]++,sinon.stub());cov_27fiovgj30().s[23]++;indexFacesAndStoreStub.rejects(new Error('Some error'));// Call the controller function
cov_27fiovgj30().s[24]++;await accept(req,res);// Assert the response
cov_27fiovgj30().s[25]++;expect(res.status.calledWith(500)).to.be.true;cov_27fiovgj30().s[26]++;expect(res.json.calledOnce).to.be.true;cov_27fiovgj30().s[27]++;expect(res.json.firstCall.args[0]).to.deep.equal({success:false,message:'Internal server error'});});});cov_27fiovgj30().s[28]++;describe('reject controller',()=>{cov_27fiovgj30().f[3]++;cov_27fiovgj30().s[29]++;it('should return success response for each id when rejectRequest resolves',async()=>{cov_27fiovgj30().f[4]++;const req=(cov_27fiovgj30().s[30]++,{body:{ids:[1,2,3]}});const res=(cov_27fiovgj30().s[31]++,{status:sinon.stub().returnsThis(),json:sinon.stub()});// Stubbing the rejectRequest method
const rejectRequestStub=(cov_27fiovgj30().s[32]++,sinon.stub());cov_27fiovgj30().s[33]++;rejectRequestStub.resolves();// Call the controller function
cov_27fiovgj30().s[34]++;await reject(req,res);// Assert the response
cov_27fiovgj30().s[35]++;expect(res.status.calledWith(200)).to.be.true;cov_27fiovgj30().s[36]++;expect(res.json.calledOnce).to.be.true;cov_27fiovgj30().s[37]++;expect(res.json.firstCall.args[0]).to.deep.equal({success:true,message:'Requests rejected successfully'});});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,