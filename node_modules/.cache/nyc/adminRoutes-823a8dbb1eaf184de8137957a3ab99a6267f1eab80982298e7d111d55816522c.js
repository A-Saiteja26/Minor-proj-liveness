function cov_1sayuba7pn(){var path="/home/teja/saiteja/minor_pro/routes/adminRoutes.js";var hash="56d126830cf727ba9bd85a0b1ae6413c6833080c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/routes/adminRoutes.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:33}},"1":{start:{line:2,column:13},end:{line:2,column:29}},"2":{start:{line:3,column:11},end:{line:3,column:26}},"3":{start:{line:4,column:17},end:{line:4,column:39}},"4":{start:{line:5,column:12},end:{line:5,column:35}},"5":{start:{line:6,column:18},end:{line:6,column:66}},"6":{start:{line:7,column:21},end:{line:7,column:45}},"7":{start:{line:8,column:0},end:{line:8,column:27}},"8":{start:{line:9,column:0},end:{line:9,column:30}},"9":{start:{line:12,column:0},end:{line:12,column:54}},"10":{start:{line:13,column:25},end:{line:13,column:66}},"11":{start:{line:14,column:0},end:{line:16,column:2}},"12":{start:{line:15,column:4},end:{line:15,column:66}},"13":{start:{line:18,column:0},end:{line:27,column:2}},"14":{start:{line:19,column:20},end:{line:19,column:28}},"15":{start:{line:20,column:4},end:{line:26,column:5}},"16":{start:{line:21,column:24},end:{line:21,column:59}},"17":{start:{line:22,column:8},end:{line:22,column:45}},"18":{start:{line:25,column:8},end:{line:25,column:53}},"19":{start:{line:48,column:0},end:{line:69,column:3}},"20":{start:{line:49,column:17},end:{line:49,column:30}},"21":{start:{line:50,column:17},end:{line:50,column:30}},"22":{start:{line:51,column:4},end:{line:53,column:5}},"23":{start:{line:52,column:8},end:{line:52,column:80}},"24":{start:{line:55,column:4},end:{line:55,column:22}},"25":{start:{line:56,column:4},end:{line:56,column:22}},"26":{start:{line:57,column:4},end:{line:68,column:5}},"27":{start:{line:59,column:22},end:{line:59,column:79}},"28":{start:{line:62,column:8},end:{line:65,column:11}},"29":{start:{line:67,column:8},end:{line:67,column:72}},"30":{start:{line:71,column:26},end:{line:71,column:68}},"31":{start:{line:73,column:0},end:{line:73,column:66}},"32":{start:{line:75,column:23},end:{line:75,column:62}},"33":{start:{line:78,column:0},end:{line:80,column:3}},"34":{start:{line:79,column:4},end:{line:79,column:48}},"35":{start:{line:93,column:42},end:{line:93,column:85}},"36":{start:{line:104,column:0},end:{line:134,column:3}},"37":{start:{line:105,column:4},end:{line:105,column:30}},"38":{start:{line:106,column:16},end:{line:106,column:28}},"39":{start:{line:107,column:4},end:{line:124,column:5}},"40":{start:{line:108,column:24},end:{line:108,column:26}},"41":{start:{line:109,column:8},end:{line:118,column:9}},"42":{start:{line:110,column:24},end:{line:110,column:52}},"43":{start:{line:111,column:12},end:{line:116,column:13}},"44":{start:{line:112,column:16},end:{line:112,column:104}},"45":{start:{line:115,column:16},end:{line:115,column:70}},"46":{start:{line:117,column:12},end:{line:117,column:38}},"47":{start:{line:119,column:8},end:{line:119,column:39}},"48":{start:{line:122,column:8},end:{line:122,column:39}},"49":{start:{line:123,column:8},end:{line:123,column:83}},"50":{start:{line:145,column:0},end:{line:164,column:3}},"51":{start:{line:146,column:4},end:{line:146,column:29}},"52":{start:{line:147,column:16},end:{line:147,column:28}},"53":{start:{line:148,column:4},end:{line:157,column:5}},"54":{start:{line:149,column:8},end:{line:152,column:9}},"55":{start:{line:150,column:24},end:{line:150,column:47}},"56":{start:{line:151,column:12},end:{line:151,column:37}},"57":{start:{line:153,column:8},end:{line:153,column:91}},"58":{start:{line:155,column:8},end:{line:155,column:39}},"59":{start:{line:156,column:8},end:{line:156,column:83}},"60":{start:{line:165,column:19},end:{line:165,column:54}},"61":{start:{line:166,column:0},end:{line:168,column:2}},"62":{start:{line:167,column:5},end:{line:167,column:39}},"63":{start:{line:169,column:0},end:{line:169,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:20},end:{line:14,column:21}},loc:{start:{line:14,column:31},end:{line:16,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:29},end:{line:18,column:30}},loc:{start:{line:18,column:49},end:{line:27,column:1}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:48,column:26},end:{line:48,column:27}},loc:{start:{line:48,column:40},end:{line:69,column:1}},line:48},"3":{name:"(anonymous_3)",decl:{start:{line:78,column:29},end:{line:78,column:30}},loc:{start:{line:78,column:43},end:{line:80,column:1}},line:78},"4":{name:"(anonymous_4)",decl:{start:{line:104,column:23},end:{line:104,column:24}},loc:{start:{line:104,column:43},end:{line:134,column:1}},line:104},"5":{name:"(anonymous_5)",decl:{start:{line:145,column:24},end:{line:145,column:25}},loc:{start:{line:145,column:44},end:{line:164,column:1}},line:145},"6":{name:"(anonymous_6)",decl:{start:{line:166,column:26},end:{line:166,column:27}},loc:{start:{line:166,column:43},end:{line:168,column:1}},line:166}},branchMap:{"0":{loc:{start:{line:51,column:4},end:{line:53,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:53,column:5}},{start:{line:51,column:4},end:{line:53,column:5}}],line:51},"1":{loc:{start:{line:51,column:8},end:{line:51,column:22}},type:"binary-expr",locations:[{start:{line:51,column:8},end:{line:51,column:13}},{start:{line:51,column:17},end:{line:51,column:22}}],line:51},"2":{loc:{start:{line:57,column:4},end:{line:68,column:5}},type:"if",locations:[{start:{line:57,column:4},end:{line:68,column:5}},{start:{line:57,column:4},end:{line:68,column:5}}],line:57},"3":{loc:{start:{line:57,column:8},end:{line:57,column:45}},type:"binary-expr",locations:[{start:{line:57,column:8},end:{line:57,column:26}},{start:{line:57,column:30},end:{line:57,column:45}}],line:57},"4":{loc:{start:{line:111,column:12},end:{line:116,column:13}},type:"if",locations:[{start:{line:111,column:12},end:{line:116,column:13}},{start:{line:111,column:12},end:{line:116,column:13}}],line:111}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"56d126830cf727ba9bd85a0b1ae6413c6833080c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1sayuba7pn=function(){return actualCoverage;};}return actualCoverage;}cov_1sayuba7pn();const express=(cov_1sayuba7pn().s[0]++,require('express'));const router=(cov_1sayuba7pn().s[1]++,express.Router());const path=(cov_1sayuba7pn().s[2]++,require('path'));const bodyParser=(cov_1sayuba7pn().s[3]++,require('body-parser'));const jwt=(cov_1sayuba7pn().s[4]++,require('jsonwebtoken'));const secretKey=(cov_1sayuba7pn().s[5]++,'ThisIsASampleSecretKeyForJWTAuthentication428!');const cookieParser=(cov_1sayuba7pn().s[6]++,require('cookie-parser'));cov_1sayuba7pn().s[7]++;router.use(cookieParser());cov_1sayuba7pn().s[8]++;router.use(bodyParser.json());// Middleware to parse incoming request bodies
cov_1sayuba7pn().s[9]++;router.use(bodyParser.urlencoded({extended:true}));const cookieController=(cov_1sayuba7pn().s[10]++,require('../controller/cookieController'));cov_1sayuba7pn().s[11]++;router.get('/admin',(req,res)=>{cov_1sayuba7pn().f[0]++;cov_1sayuba7pn().s[12]++;res.sendFile(path.join(__dirname,'../views/admin/login.html'));});cov_1sayuba7pn().s[13]++;router.post("/validatejwt",async(req,res)=>{cov_1sayuba7pn().f[1]++;const{token}=(cov_1sayuba7pn().s[14]++,req.body);cov_1sayuba7pn().s[15]++;try{const decoded=(cov_1sayuba7pn().s[16]++,await jwt.verify(token,secretKey));cov_1sayuba7pn().s[17]++;return res.status(200).send(decoded);}catch(err){cov_1sayuba7pn().s[18]++;return res.status(401).send("Invalid Token");}});/*router.post('/dashboard', (req, res) => {
    const user = req.body.user;
    const pass = req.body.pass;
    if (!user || !pass) {
        return res.status(400).send('Both username and password are required.');
    }

    console.log(user);
    console.log(pass);
    if (user === "saiteja" && pass === "1234") {
        res.cookie('user', user, { maxAge: 9000000,minAge:300000 ,httpOnly: true });
        res.cookie('pass', pass);
        res.status(200).send(`${user} Welcome U Are Admin`);
        //res.sendFile(path.join(__dirname, '../views/admin/dashboard.html'));
    } else {
        res.status(401).send(`${user} You entered invalid credentials`);
    }
});*/cov_1sayuba7pn().s[19]++;router.post('/dashboard',(req,res)=>{cov_1sayuba7pn().f[2]++;const user=(cov_1sayuba7pn().s[20]++,req.body.user);const pass=(cov_1sayuba7pn().s[21]++,req.body.pass);cov_1sayuba7pn().s[22]++;if((cov_1sayuba7pn().b[1][0]++,!user)||(cov_1sayuba7pn().b[1][1]++,!pass)){cov_1sayuba7pn().b[0][0]++;cov_1sayuba7pn().s[23]++;return res.status(400).send('Both username and password are required.');}else{cov_1sayuba7pn().b[0][1]++;}cov_1sayuba7pn().s[24]++;console.log(user);cov_1sayuba7pn().s[25]++;console.log(pass);cov_1sayuba7pn().s[26]++;if((cov_1sayuba7pn().b[3][0]++,user==="saiteja")&&(cov_1sayuba7pn().b[3][1]++,pass==="1234")){cov_1sayuba7pn().b[2][0]++;// Create a JWT token
const token=(cov_1sayuba7pn().s[27]++,jwt.sign({user:user},secretKey,{expiresIn:'30m'}));// Send the token as a response
cov_1sayuba7pn().s[28]++;res.status(200).json({token:token,message:`${user} Welcome, You Are Admin`});}else{cov_1sayuba7pn().b[2][1]++;cov_1sayuba7pn().s[29]++;res.status(401).send(`${user} You entered invalid credentials`);}});const pendingController=(cov_1sayuba7pn().s[30]++,require('../controller/pendingController'));cov_1sayuba7pn().s[31]++;router.get('/pending-requests',pendingController.pendingRequests);const viewController=(cov_1sayuba7pn().s[32]++,require('../controller/viewController'));//router.get('/view-requests',viewController.getPendingRequests)
cov_1sayuba7pn().s[33]++;router.get('/view-requests',(req,res)=>{cov_1sayuba7pn().f[3]++;cov_1sayuba7pn().s[34]++;viewController.getPendingRequests(req,res);});/*router.get('/view-requests', (req, res) => {

  
    if (cookieController.checkCookie(req, res, 'user')) {
        console.log(req.cookies['user'])
        console.log(req.cookies['pass'])// Cookie exists, proceed to the next middleware (getPendingRequests)
    } else{

        res.sendFile(path.join(__dirname,'../views/admin/login.html'))
    }
}, viewController.getPendingRequests);*/const{indexFacesAndStore,rejectRequest}=(cov_1sayuba7pn().s[35]++,require('../controller/registerController'));/*router.post('/accept', cookieController.checkCookie, async (req, res) => {
    console.log(req.cookies['user']);
    console.log(req.cookies['pass']); // Assuming you're checking 'pass' cookie as well
    try {
        await indexFacesAndStore(req, res);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});*/cov_1sayuba7pn().s[36]++;router.post('/accept',async(req,res)=>{cov_1sayuba7pn().f[4]++;cov_1sayuba7pn().s[37]++;console.log(req.body.ids);const arr=(cov_1sayuba7pn().s[38]++,req.body.ids);cov_1sayuba7pn().s[39]++;try{let final_res=(cov_1sayuba7pn().s[40]++,[]);cov_1sayuba7pn().s[41]++;for(const id of arr){const data=(cov_1sayuba7pn().s[42]++,await indexFacesAndStore(id));cov_1sayuba7pn().s[43]++;if(data==0){cov_1sayuba7pn().b[4][0]++;cov_1sayuba7pn().s[44]++;final_res.push(`0 ${id} face cannot be registerd because same face is already present `);}else{cov_1sayuba7pn().b[4][1]++;cov_1sayuba7pn().s[45]++;final_res.push(`1 ${id} is registered  successfully`);}cov_1sayuba7pn().s[46]++;console.log(`${id}`,data);}cov_1sayuba7pn().s[47]++;res.status(200).send(final_res);//res.status(200).json({ success: true, message: 'Requests accepted successfully' });
}catch(error){cov_1sayuba7pn().s[48]++;console.error('Error:',error);cov_1sayuba7pn().s[49]++;res.status(500).json({success:false,message:'Internal server error'});}// Assuming you're checking 'pass' cookie as well
/*try {
        await indexFacesAndStore(req, res);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }*/});/*router.post('/reject', cookieController.checkCookie, async (req, res) => {
    console.log(req.cookies['user']);
    console.log(req.cookies['pass']);
    try {
        await rejectRequest(req, res);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});*/cov_1sayuba7pn().s[50]++;router.post('/reject',async(req,res)=>{cov_1sayuba7pn().f[5]++;cov_1sayuba7pn().s[51]++;console.log(req.body.ids);const arr=(cov_1sayuba7pn().s[52]++,req.body.ids);cov_1sayuba7pn().s[53]++;try{cov_1sayuba7pn().s[54]++;for(const id of arr){const data=(cov_1sayuba7pn().s[55]++,await rejectRequest(id));cov_1sayuba7pn().s[56]++;console.log(`${id}`,data);}cov_1sayuba7pn().s[57]++;res.status(200).json({success:true,message:'Requests rejected successfully'});}catch(error){cov_1sayuba7pn().s[58]++;console.error('Error:',error);cov_1sayuba7pn().s[59]++;res.status(500).json({success:false,message:'Internal server error'});}/*
    try {
        await rejectRequest(req, res);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }*/});const getMembers=(cov_1sayuba7pn().s[60]++,require('../controller/getMembers'));cov_1sayuba7pn().s[61]++;router.get('/get-members',async(req,res)=>{cov_1sayuba7pn().f[6]++;cov_1sayuba7pn().s[62]++;await getMembers.members(req,res);});cov_1sayuba7pn().s[63]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,