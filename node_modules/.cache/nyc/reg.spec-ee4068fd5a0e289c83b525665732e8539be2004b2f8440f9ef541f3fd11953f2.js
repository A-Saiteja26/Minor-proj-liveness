// //"test": "mocha --watch 'test/**/*.js'",
// const sinon = require('sinon');
// const { expect } = require('chai');
// const { ObjectId } = require('mongodb');
// //const { mongoClient, rekognition, s3 } = require('../controller'); // Import necessary dependencies
// //const {mongoClient} = require('../config/database')
// //const s3 = require('../config/s3');
// //const rekognition = require('../config/aws');
// const { indexFacesAndStore,rejectRequest} = require('../controller/registerController')
// //const { ObjectId } = require('mongodb');
// // Generate a valid ObjectID
// const id = new ObjectId();
// const mongoClient = {
//     connect: sinon.stub().resolves({
//         db: sinon.stub().returnsThis(),
//         close: sinon.stub().resolves(),
//         collection: sinon.stub().returnsThis(),
//         findOne: sinon.stub().resolves({ imageUrl: 'testImageUrl' }),
//         updateOne: sinon.stub().resolves(),
//         insertOne: sinon.stub().resolves()
//     })
// };
// const s3 = {
//     getObject: sinon.stub().returns({
//         promise: sinon.stub().resolves({ Body: 'testImageData' })
//     })
// };
// const rekognition = {
//     detectFaces: sinon.stub().returns({
//         promise: sinon.stub().resolves({ FaceDetails: [{}, {}] })
//     }),
//     searchFacesByImage: sinon.stub().returns({
//         promise: sinon.stub().resolves({ FaceMatches: [{}, {}] })
//     }),
//     indexFaces: sinon.stub().returns({
//         promise: sinon.stub().resolves({ FaceRecords: [{ Face: { FaceId: 'testFaceId' } }] })
//     })
// };
// const dependencies = {
//     mongoClient,
//     s3,
//     rekognition
// };
// describe('indexFacesAndStore', () => {
//     it('should execute all branches', async () => {
//         // Stub process.env.COLLECTION_ID
//         const collectionId = 'testCollectionId';
//         process.env.COLLECTION_ID = collectionId;
//         // Call the function
//         const result = await indexFacesAndStore(id.toHexString(), dependencies);
//         // Assertions
//         expect(result).to.be.oneOf([0, 1,"request not found"]);
//         sinon.assert.callCount(mongoClient.connect, 1);
//         sinon.assert.callCount(mongoClient.connect().db().collection, 2);
//         sinon.assert.calledOnce(s3.getObject);
//         sinon.assert.calledOnce(rekognition.detectFaces);
//         sinon.assert.calledOnce(rekognition.searchFacesByImage);
//         sinon.assert.calledOnce(rekognition.indexFaces);
//         // Clean up
//         delete process.env.COLLECTION_ID;
//     }).timeout(5000);
// });
function cov_ac9ehgzcv(){var path="/home/teja/saiteja/minor_pro/test/reg.spec.js";var hash="7075f64186a4cc81ebebf24663a6d1df4641c3cc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/test/reg.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7075f64186a4cc81ebebf24663a6d1df4641c3cc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ac9ehgzcv=function(){return actualCoverage;};}return actualCoverage;}cov_ac9ehgzcv();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYWM5ZWhnemN2IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSJdLCJzb3VyY2VzIjpbInJlZy5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC8vXCJ0ZXN0XCI6IFwibW9jaGEgLS13YXRjaCAndGVzdC8qKi8qLmpzJ1wiLFxuLy8gY29uc3Qgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xuLy8gY29uc3QgeyBleHBlY3QgfSA9IHJlcXVpcmUoJ2NoYWknKTtcbi8vIGNvbnN0IHsgT2JqZWN0SWQgfSA9IHJlcXVpcmUoJ21vbmdvZGInKTtcbi8vIC8vY29uc3QgeyBtb25nb0NsaWVudCwgcmVrb2duaXRpb24sIHMzIH0gPSByZXF1aXJlKCcuLi9jb250cm9sbGVyJyk7IC8vIEltcG9ydCBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzXG4vLyAvL2NvbnN0IHttb25nb0NsaWVudH0gPSByZXF1aXJlKCcuLi9jb25maWcvZGF0YWJhc2UnKVxuLy8gLy9jb25zdCBzMyA9IHJlcXVpcmUoJy4uL2NvbmZpZy9zMycpO1xuLy8gLy9jb25zdCByZWtvZ25pdGlvbiA9IHJlcXVpcmUoJy4uL2NvbmZpZy9hd3MnKTtcbi8vIGNvbnN0IHsgaW5kZXhGYWNlc0FuZFN0b3JlLHJlamVjdFJlcXVlc3R9ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlci9yZWdpc3RlckNvbnRyb2xsZXInKVxuLy8gLy9jb25zdCB7IE9iamVjdElkIH0gPSByZXF1aXJlKCdtb25nb2RiJyk7XG5cbi8vIC8vIEdlbmVyYXRlIGEgdmFsaWQgT2JqZWN0SURcbi8vIGNvbnN0IGlkID0gbmV3IE9iamVjdElkKCk7XG5cbi8vIGNvbnN0IG1vbmdvQ2xpZW50ID0ge1xuLy8gICAgIGNvbm5lY3Q6IHNpbm9uLnN0dWIoKS5yZXNvbHZlcyh7XG4vLyAgICAgICAgIGRiOiBzaW5vbi5zdHViKCkucmV0dXJuc1RoaXMoKSxcbi8vICAgICAgICAgY2xvc2U6IHNpbm9uLnN0dWIoKS5yZXNvbHZlcygpLFxuLy8gICAgICAgICBjb2xsZWN0aW9uOiBzaW5vbi5zdHViKCkucmV0dXJuc1RoaXMoKSxcbi8vICAgICAgICAgZmluZE9uZTogc2lub24uc3R1YigpLnJlc29sdmVzKHsgaW1hZ2VVcmw6ICd0ZXN0SW1hZ2VVcmwnIH0pLFxuLy8gICAgICAgICB1cGRhdGVPbmU6IHNpbm9uLnN0dWIoKS5yZXNvbHZlcygpLFxuLy8gICAgICAgICBpbnNlcnRPbmU6IHNpbm9uLnN0dWIoKS5yZXNvbHZlcygpXG4vLyAgICAgfSlcbi8vIH07XG4vLyBjb25zdCBzMyA9IHtcbi8vICAgICBnZXRPYmplY3Q6IHNpbm9uLnN0dWIoKS5yZXR1cm5zKHtcbi8vICAgICAgICAgcHJvbWlzZTogc2lub24uc3R1YigpLnJlc29sdmVzKHsgQm9keTogJ3Rlc3RJbWFnZURhdGEnIH0pXG4vLyAgICAgfSlcbi8vIH07XG4vLyBjb25zdCByZWtvZ25pdGlvbiA9IHtcbi8vICAgICBkZXRlY3RGYWNlczogc2lub24uc3R1YigpLnJldHVybnMoe1xuLy8gICAgICAgICBwcm9taXNlOiBzaW5vbi5zdHViKCkucmVzb2x2ZXMoeyBGYWNlRGV0YWlsczogW3t9LCB7fV0gfSlcbi8vICAgICB9KSxcbi8vICAgICBzZWFyY2hGYWNlc0J5SW1hZ2U6IHNpbm9uLnN0dWIoKS5yZXR1cm5zKHtcbi8vICAgICAgICAgcHJvbWlzZTogc2lub24uc3R1YigpLnJlc29sdmVzKHsgRmFjZU1hdGNoZXM6IFt7fSwge31dIH0pXG4vLyAgICAgfSksXG4vLyAgICAgaW5kZXhGYWNlczogc2lub24uc3R1YigpLnJldHVybnMoe1xuLy8gICAgICAgICBwcm9taXNlOiBzaW5vbi5zdHViKCkucmVzb2x2ZXMoeyBGYWNlUmVjb3JkczogW3sgRmFjZTogeyBGYWNlSWQ6ICd0ZXN0RmFjZUlkJyB9IH1dIH0pXG4vLyAgICAgfSlcbi8vIH07XG5cbi8vIGNvbnN0IGRlcGVuZGVuY2llcyA9IHtcbi8vICAgICBtb25nb0NsaWVudCxcbi8vICAgICBzMyxcbi8vICAgICByZWtvZ25pdGlvblxuLy8gfTtcblxuLy8gZGVzY3JpYmUoJ2luZGV4RmFjZXNBbmRTdG9yZScsICgpID0+IHtcbi8vICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgYWxsIGJyYW5jaGVzJywgYXN5bmMgKCkgPT4ge1xuLy8gICAgICAgICAvLyBTdHViIHByb2Nlc3MuZW52LkNPTExFQ1RJT05fSURcbi8vICAgICAgICAgY29uc3QgY29sbGVjdGlvbklkID0gJ3Rlc3RDb2xsZWN0aW9uSWQnO1xuLy8gICAgICAgICBwcm9jZXNzLmVudi5DT0xMRUNUSU9OX0lEID0gY29sbGVjdGlvbklkO1xuXG4vLyAgICAgICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uXG4vLyAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGluZGV4RmFjZXNBbmRTdG9yZShpZC50b0hleFN0cmluZygpLCBkZXBlbmRlbmNpZXMpO1xuXG4vLyAgICAgICAgIC8vIEFzc2VydGlvbnNcbi8vICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUub25lT2YoWzAsIDEsXCJyZXF1ZXN0IG5vdCBmb3VuZFwiXSk7XG4vLyAgICAgICAgIHNpbm9uLmFzc2VydC5jYWxsQ291bnQobW9uZ29DbGllbnQuY29ubmVjdCwgMSk7XG4vLyAgICAgICAgIHNpbm9uLmFzc2VydC5jYWxsQ291bnQobW9uZ29DbGllbnQuY29ubmVjdCgpLmRiKCkuY29sbGVjdGlvbiwgMik7XG4vLyAgICAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRPbmNlKHMzLmdldE9iamVjdCk7XG4vLyAgICAgICAgIHNpbm9uLmFzc2VydC5jYWxsZWRPbmNlKHJla29nbml0aW9uLmRldGVjdEZhY2VzKTtcbi8vICAgICAgICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2UocmVrb2duaXRpb24uc2VhcmNoRmFjZXNCeUltYWdlKTtcbi8vICAgICAgICAgc2lub24uYXNzZXJ0LmNhbGxlZE9uY2UocmVrb2duaXRpb24uaW5kZXhGYWNlcyk7XG5cbi8vICAgICAgICAgLy8gQ2xlYW4gdXBcbi8vICAgICAgICAgZGVsZXRlIHByb2Nlc3MuZW52LkNPTExFQ1RJT05fSUQ7XG4vLyAgICAgfSkudGltZW91dCg1MDAwKTtcbi8vIH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUEsU0FBQUEsY0FBQSxNQUFBQyxJQUFBLHFEQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSxpREFBQU0sWUFBQSxJQUFBQyxLQUFBLElBQUFDLFNBQUEsSUFBQUMsQ0FBQSxJQUFBQyxDQUFBLElBQUFDLENBQUEsSUFBQUMsZUFBQSw0Q0FBQVgsSUFBQSxpREFBQVksUUFBQSxDQUFBWCxNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFTLFFBQUEsQ0FBQWIsSUFBQSxHQUFBYSxRQUFBLENBQUFiLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUFZLFFBQUEsQ0FBQWIsSUFBQSxFQUFBSyxZQUFBLE1BQUFTLGNBQUEsQ0FBQUQsUUFBQSxDQUFBYixJQUFBLEdBckRZO0FBQUFELGFBQUEsU0FBQUEsQ0FBQSxTQUFBZSxjQUFBLFdBQUFBLGNBQUEsRUFBQWYsYUFBQSIsImlnbm9yZUxpc3QiOltdfQ==