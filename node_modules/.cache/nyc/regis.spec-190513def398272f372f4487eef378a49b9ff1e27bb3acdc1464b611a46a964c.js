function cov_60g1vcvai(){var path="/home/teja/saiteja/minor_pro/test/regis.spec.js";var hash="5718b68812859ccd8f69049f5eee9cfa0c85f67f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/test/regis.spec.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:14},end:{line:2,column:30}},"2":{start:{line:3,column:19},end:{line:3,column:23}},"3":{start:{line:4,column:46},end:{line:4,column:89}},"4":{start:{line:6,column:0},end:{line:58,column:3}},"5":{start:{line:9,column:4},end:{line:34,column:7}},"6":{start:{line:10,column:8},end:{line:16,column:11}},"7":{start:{line:18,column:8},end:{line:28,column:10}},"8":{start:{line:30,column:8},end:{line:33,column:10}},"9":{start:{line:36,column:4},end:{line:39,column:7}},"10":{start:{line:37,column:23},end:{line:37,column:99}},"11":{start:{line:38,column:8},end:{line:38,column:35}},"12":{start:{line:41,column:4},end:{line:45,column:7}},"13":{start:{line:42,column:8},end:{line:42,column:87}},"14":{start:{line:43,column:23},end:{line:43,column:99}},"15":{start:{line:44,column:8},end:{line:44,column:35}},"16":{start:{line:47,column:4},end:{line:51,column:7}},"17":{start:{line:48,column:8},end:{line:48,column:74}},"18":{start:{line:49,column:23},end:{line:49,column:99}},"19":{start:{line:50,column:8},end:{line:50,column:75}},"20":{start:{line:53,column:4},end:{line:57,column:7}},"21":{start:{line:54,column:8},end:{line:54,column:72}},"22":{start:{line:55,column:23},end:{line:55,column:99}},"23":{start:{line:56,column:8},end:{line:56,column:57}},"24":{start:{line:60,column:0},end:{line:81,column:3}},"25":{start:{line:61,column:4},end:{line:72,column:7}},"26":{start:{line:62,column:32},end:{line:69,column:9}},"27":{start:{line:70,column:23},end:{line:70,column:69}},"28":{start:{line:71,column:8},end:{line:71,column:65}},"29":{start:{line:74,column:4},end:{line:80,column:7}},"30":{start:{line:75,column:32},end:{line:77,column:9}},"31":{start:{line:78,column:23},end:{line:78,column:69}},"32":{start:{line:79,column:8},end:{line:79,column:57}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:40},end:{line:6,column:41}},loc:{start:{line:6,column:46},end:{line:58,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:15},end:{line:9,column:16}},loc:{start:{line:9,column:21},end:{line:34,column:5}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:69},end:{line:36,column:70}},loc:{start:{line:36,column:81},end:{line:39,column:5}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:41,column:56},end:{line:41,column:57}},loc:{start:{line:41,column:68},end:{line:45,column:5}},line:41},"4":{name:"(anonymous_4)",decl:{start:{line:47,column:91},end:{line:47,column:92}},loc:{start:{line:47,column:103},end:{line:51,column:5}},line:47},"5":{name:"(anonymous_5)",decl:{start:{line:53,column:67},end:{line:53,column:68}},loc:{start:{line:53,column:79},end:{line:57,column:5}},line:53},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:35},end:{line:60,column:36}},loc:{start:{line:60,column:41},end:{line:81,column:1}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:61,column:85},end:{line:61,column:86}},loc:{start:{line:61,column:97},end:{line:72,column:5}},line:61},"8":{name:"(anonymous_8)",decl:{start:{line:74,column:67},end:{line:74,column:68}},loc:{start:{line:74,column:79},end:{line:80,column:5}},line:74}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5718b68812859ccd8f69049f5eee9cfa0c85f67f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_60g1vcvai=function(){return actualCoverage;};}return actualCoverage;}cov_60g1vcvai();const chai=(cov_60g1vcvai().s[0]++,require('chai'));const sinon=(cov_60g1vcvai().s[1]++,require('sinon'));const{expect}=(cov_60g1vcvai().s[2]++,chai);const{indexFacesAndStore,rejectRequest}=(cov_60g1vcvai().s[3]++,require('../controller/registerController'));// Assuming your controller file name is yourController.js
cov_60g1vcvai().s[4]++;describe('indexFacesAndStore function',()=>{cov_60g1vcvai().f[0]++;let mongoClientStub,rekognitionStub,s3Stub;cov_60g1vcvai().s[5]++;beforeEach(()=>{cov_60g1vcvai().f[1]++;cov_60g1vcvai().s[6]++;mongoClientStub=sinon.stub().resolves({db:sinon.stub().returnsThis(),collection:sinon.stub().returnsThis(),findOne:sinon.stub().resolves({imageUrl:'test/image.jpg'}),updateOne:sinon.stub().resolves(),close:sinon.stub().resolves()});cov_60g1vcvai().s[7]++;rekognitionStub={detectFaces:sinon.stub().returns({promise:sinon.stub().resolves({FaceDetails:[{},{}]})}),searchFacesByImage:sinon.stub().returns({promise:sinon.stub().resolves({FaceMatches:[]})}),indexFaces:sinon.stub().returns({promise:sinon.stub().resolves({FaceRecords:[{Face:{FaceId:'testFaceId'}}]})})};cov_60g1vcvai().s[8]++;s3Stub={getObject:sinon.stub().returnsThis(),promise:sinon.stub().resolves({Body:'testImageData'})};});cov_60g1vcvai().s[9]++;it('should return 1 if face is indexed and stored successfully',async()=>{cov_60g1vcvai().f[2]++;const result=(cov_60g1vcvai().s[10]++,await indexFacesAndStore('testId',mongoClientStub,rekognitionStub,s3Stub));cov_60g1vcvai().s[11]++;expect(result).to.equal(1);});cov_60g1vcvai().s[12]++;it('should return 0 if face is already registered',async()=>{cov_60g1vcvai().f[3]++;cov_60g1vcvai().s[13]++;rekognitionStub.searchFacesByImage.promise.resolves({FaceMatches:[{},{}]});const result=(cov_60g1vcvai().s[14]++,await indexFacesAndStore('testId',mongoClientStub,rekognitionStub,s3Stub));cov_60g1vcvai().s[15]++;expect(result).to.equal(0);});cov_60g1vcvai().s[16]++;it('should return "No faces detected" if no faces are detected in the provided image',async()=>{cov_60g1vcvai().f[4]++;cov_60g1vcvai().s[17]++;rekognitionStub.detectFaces.promise.resolves({FaceDetails:[]});const result=(cov_60g1vcvai().s[18]++,await indexFacesAndStore('testId',mongoClientStub,rekognitionStub,s3Stub));cov_60g1vcvai().s[19]++;expect(result).to.equal('No faces detected in the provided image');});cov_60g1vcvai().s[20]++;it('should return "internal server error" if an error occurs',async()=>{cov_60g1vcvai().f[5]++;cov_60g1vcvai().s[21]++;mongoClientStub=sinon.stub().rejects(new Error('Test error'));const result=(cov_60g1vcvai().s[22]++,await indexFacesAndStore('testId',mongoClientStub,rekognitionStub,s3Stub));cov_60g1vcvai().s[23]++;expect(result).to.equal('internal server error');});});cov_60g1vcvai().s[24]++;describe('rejectRequest function',()=>{cov_60g1vcvai().f[6]++;cov_60g1vcvai().s[25]++;it('should return "request rejected successfully" when the request is rejected',async()=>{cov_60g1vcvai().f[7]++;const mongoClientStub=(cov_60g1vcvai().s[26]++,{connect:sinon.stub().resolves({db:sinon.stub().returnsThis(),collection:sinon.stub().returnsThis(),updateOne:sinon.stub().resolves(),close:sinon.stub().resolves()})});const result=(cov_60g1vcvai().s[27]++,await rejectRequest('testId',mongoClientStub));cov_60g1vcvai().s[28]++;expect(result).to.equal('request rejected successfully');});cov_60g1vcvai().s[29]++;it('should return "Internal Server Error" if an error occurs',async()=>{cov_60g1vcvai().f[8]++;const mongoClientStub=(cov_60g1vcvai().s[30]++,{connect:sinon.stub().rejects(new Error('Test error'))});const result=(cov_60g1vcvai().s[31]++,await rejectRequest('testId',mongoClientStub));cov_60g1vcvai().s[32]++;expect(result).to.equal('Internal Server Error');});});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,