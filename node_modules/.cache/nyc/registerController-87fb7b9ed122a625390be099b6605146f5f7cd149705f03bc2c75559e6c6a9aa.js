function cov_zmmj4byiu(){var path="/home/teja/saiteja/minor_pro/controller/registerController.js";var hash="599804b281ec9ffef7b6dbb203bb99c941890ca9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/controller/registerController.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:27}},"1":{start:{line:3,column:20},end:{line:3,column:44}},"2":{start:{line:4,column:24},end:{line:4,column:53}},"3":{start:{line:5,column:11},end:{line:5,column:34}},"4":{start:{line:6,column:34},end:{line:6,column:52}},"5":{start:{line:74,column:2},end:{line:142,column:3}},"6":{start:{line:75,column:6},end:{line:75,column:43}},"7":{start:{line:76,column:17},end:{line:76,column:45}},"8":{start:{line:77,column:27},end:{line:77,column:52}},"9":{start:{line:80,column:22},end:{line:80,column:87}},"10":{start:{line:82,column:6},end:{line:84,column:7}},"11":{start:{line:83,column:10},end:{line:83,column:88}},"12":{start:{line:87,column:23},end:{line:87,column:39}},"13":{start:{line:90,column:23},end:{line:93,column:7}},"14":{start:{line:94,column:24},end:{line:94,column:62}},"15":{start:{line:97,column:26},end:{line:100,column:7}},"16":{start:{line:101,column:27},end:{line:103,column:7}},"17":{start:{line:104,column:27},end:{line:104,column:80}},"18":{start:{line:105,column:6},end:{line:131,column:7}},"19":{start:{line:106,column:27},end:{line:106,column:86}},"20":{start:{line:107,column:6},end:{line:110,column:7}},"21":{start:{line:109,column:8},end:{line:109,column:17}},"22":{start:{line:111,column:28},end:{line:111,column:79}},"23":{start:{line:114,column:23},end:{line:117,column:7}},"24":{start:{line:118,column:6},end:{line:118,column:55}},"25":{start:{line:121,column:6},end:{line:124,column:8}},"26":{start:{line:125,column:8},end:{line:125,column:16}},"27":{start:{line:127,column:11},end:{line:131,column:7}},"28":{start:{line:130,column:8},end:{line:130,column:101}},"29":{start:{line:134,column:6},end:{line:134,column:37}},"30":{start:{line:135,column:6},end:{line:135,column:36}},"31":{start:{line:139,column:6},end:{line:141,column:7}},"32":{start:{line:140,column:10},end:{line:140,column:31}},"33":{start:{line:150,column:2},end:{line:168,column:3}},"34":{start:{line:151,column:21},end:{line:151,column:48}},"35":{start:{line:152,column:17},end:{line:152,column:45}},"36":{start:{line:155,column:21},end:{line:158,column:7}},"37":{start:{line:161,column:6},end:{line:161,column:27}},"38":{start:{line:162,column:8},end:{line:162,column:46}},"39":{start:{line:165,column:6},end:{line:165,column:37}},"40":{start:{line:166,column:6},end:{line:166,column:36}},"41":{start:{line:171,column:0},end:{line:171,column:53}}},fnMap:{"0":{name:"indexFacesAndStore",decl:{start:{line:72,column:15},end:{line:72,column:33}},loc:{start:{line:72,column:38},end:{line:143,column:1}},line:72},"1":{name:"rejectRequest",decl:{start:{line:149,column:15},end:{line:149,column:28}},loc:{start:{line:149,column:33},end:{line:169,column:1}},line:149}},branchMap:{"0":{loc:{start:{line:82,column:6},end:{line:84,column:7}},type:"if",locations:[{start:{line:82,column:6},end:{line:84,column:7}},{start:{line:82,column:6},end:{line:84,column:7}}],line:82},"1":{loc:{start:{line:105,column:6},end:{line:131,column:7}},type:"if",locations:[{start:{line:105,column:6},end:{line:131,column:7}},{start:{line:105,column:6},end:{line:131,column:7}}],line:105},"2":{loc:{start:{line:105,column:10},end:{line:105,column:75}},type:"binary-expr",locations:[{start:{line:105,column:10},end:{line:105,column:34}},{start:{line:105,column:38},end:{line:105,column:75}}],line:105},"3":{loc:{start:{line:107,column:6},end:{line:110,column:7}},type:"if",locations:[{start:{line:107,column:6},end:{line:110,column:7}},{start:{line:107,column:6},end:{line:110,column:7}}],line:107},"4":{loc:{start:{line:107,column:10},end:{line:107,column:73}},type:"binary-expr",locations:[{start:{line:107,column:10},end:{line:107,column:34}},{start:{line:107,column:38},end:{line:107,column:73}}],line:107},"5":{loc:{start:{line:127,column:11},end:{line:131,column:7}},type:"if",locations:[{start:{line:127,column:11},end:{line:131,column:7}},{start:{line:127,column:11},end:{line:131,column:7}}],line:127},"6":{loc:{start:{line:127,column:15},end:{line:127,column:78}},type:"binary-expr",locations:[{start:{line:127,column:15},end:{line:127,column:39}},{start:{line:127,column:43},end:{line:127,column:78}}],line:127},"7":{loc:{start:{line:139,column:6},end:{line:141,column:7}},type:"if",locations:[{start:{line:139,column:6},end:{line:141,column:7}},{start:{line:139,column:6},end:{line:141,column:7}}],line:139}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"599804b281ec9ffef7b6dbb203bb99c941890ca9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_zmmj4byiu=function(){return actualCoverage;};}return actualCoverage;}cov_zmmj4byiu();cov_zmmj4byiu().s[0]++;require('dotenv').config();//const { MongoClient } = require('mongodb');
const rekognition=(cov_zmmj4byiu().s[1]++,require('../config/aws'));const{mongoClient}=(cov_zmmj4byiu().s[2]++,require('../config/database'));const s3=(cov_zmmj4byiu().s[3]++,require('../config/s3'));const{MongoClient,ObjectId}=(cov_zmmj4byiu().s[4]++,require('mongodb'));/*async function indexFacesAndStore(req, res) {
  let client;
  try {
    client = await mongoClient.connect();
    const db = client.db('facerecognition');
    const collectionId = process.env.COLLECTION_ID;

    // Read image data from request body
    const imageData = req.body.photoData;

    // Ensure that the image data starts with the correct data URI scheme (e.g., data:image/png;base64,)
    if (!imageData || !imageData.startsWith('data:image/png;base64,')) {
      console.error('Invalid image data format');
      return res.status(400).json({ success: false, message: 'Invalid image data format' });
    }

    // Remove the data URI scheme prefix
    const base64Data = imageData.replace(/^data:image\/png;base64,/, '');

    // Convert the base64-encoded string to a Buffer
    const imageBuffer = Buffer.from(base64Data, 'base64');

    // Detect faces in the image
    const rekognitionResponse = await rekognition.detectFaces({ Image: { Bytes: imageBuffer } }).promise();

    if (!rekognitionResponse.FaceDetails || rekognitionResponse.FaceDetails.length === 0) {
      return res.status(404).json({ success: false, message: 'No faces detected in the provided image.' });
    }

    if (rekognitionResponse.FaceDetails.length > 1) {
      return res.status(400).json({ success: false, message: 'More than 1 face detected' });
    }

    // Index faces in Rekognition
    const params = {
      CollectionId: collectionId,
      Image: { Bytes: imageBuffer },
      ExternalImageId: req.body.userData // Assuming user ID is passed in req.body.userData
    };

    // Perform the indexing
    const indexResponse = await rekognition.indexFaces(params).promise();

    // Store face data in MongoDB
    const faceData = {
      userId: req.body.userData, // Assuming user ID is passed in req.body.userData
      faceId: indexResponse.FaceRecords[0].Face.FaceId
    };

    const result = await db.collection('faces').insertOne(faceData);
    console.log(`Face indexed and stored in MongoDB with ID: ${result.insertedId}`);

    res.status(200).json({ success: true, message: 'Face indexed and stored successfully' });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  } finally {
    // Close MongoDB client
    if (client) {
      await client.close();
    }
  }
}*/async function indexFacesAndStore(id){cov_zmmj4byiu().f[0]++;let client;cov_zmmj4byiu().s[5]++;try{cov_zmmj4byiu().s[6]++;client=await mongoClient.connect();const db=(cov_zmmj4byiu().s[7]++,client.db('facerecognition'));const collectionId=(cov_zmmj4byiu().s[8]++,process.env.COLLECTION_ID);// Retrieve the document from reg_req collection using the provided _id
const request=(cov_zmmj4byiu().s[9]++,await db.collection('reg_req').findOne({_id:new ObjectId(id)}));cov_zmmj4byiu().s[10]++;if(!request){cov_zmmj4byiu().b[0][0]++;cov_zmmj4byiu().s[11]++;return res.status(404).json({success:false,message:'Request not found'});}else{cov_zmmj4byiu().b[0][1]++;}// Extract the S3 bucket location from the retrieved document
const imageUrl=(cov_zmmj4byiu().s[12]++,request.imageUrl);// Download the image from S3 bucket
const s3Params=(cov_zmmj4byiu().s[13]++,{Bucket:'faces-samp',Key:imageUrl.split('/').slice(-2).join('/')});const imageData=(cov_zmmj4byiu().s[14]++,await s3.getObject(s3Params).promise());// Perform the indexing operation using Rekognition
const indexParams=(cov_zmmj4byiu().s[15]++,{CollectionId:collectionId,Image:{Bytes:imageData.Body}});const detectParams=(cov_zmmj4byiu().s[16]++,{Image:{Bytes:imageData.Body}});const detectResult=(cov_zmmj4byiu().s[17]++,await rekognition.detectFaces(detectParams).promise());cov_zmmj4byiu().s[18]++;if((cov_zmmj4byiu().b[2][0]++,detectResult.FaceDetails)&&(cov_zmmj4byiu().b[2][1]++,detectResult.FaceDetails.length===1)){cov_zmmj4byiu().b[1][0]++;const searchResult=(cov_zmmj4byiu().s[19]++,await rekognition.searchFacesByImage(indexParams).promise());cov_zmmj4byiu().s[20]++;if((cov_zmmj4byiu().b[4][0]++,searchResult.FaceMatches)&&(cov_zmmj4byiu().b[4][1]++,searchResult.FaceMatches.length>0)){cov_zmmj4byiu().b[3][0]++;cov_zmmj4byiu().s[21]++;//res.status(302).json({success:false,message:"This face is alreday registered now we cannot register now"});
return 0;}else{cov_zmmj4byiu().b[3][1]++;}const indexResponse=(cov_zmmj4byiu().s[22]++,await rekognition.indexFaces(indexParams).promise());// Store face data in the faces collection
const faceData=(cov_zmmj4byiu().s[23]++,{userId:request.name,faceId:indexResponse.FaceRecords[0].Face.FaceId});cov_zmmj4byiu().s[24]++;await db.collection('faces').insertOne(faceData);// Update the state of the request to "accepted" in the reg_req collection
cov_zmmj4byiu().s[25]++;await db.collection('reg_req').updateOne({_id:new ObjectId(id)},{$set:{request:'accepted'}});cov_zmmj4byiu().s[26]++;return 1;}else{cov_zmmj4byiu().b[1][1]++;cov_zmmj4byiu().s[27]++;if((cov_zmmj4byiu().b[6][0]++,detectResult.FaceDetails)&&(cov_zmmj4byiu().b[6][1]++,detectResult.FaceDetails.length>1)){cov_zmmj4byiu().b[5][0]++;}//res.status(400).json({ success: false, message: `${detectResult.FaceDetails.length} faces are detected` });
else{cov_zmmj4byiu().b[5][1]++;cov_zmmj4byiu().s[28]++;res.status(404).json({success:false,message:'No faces detected in the provided image'});}}//res.status(200).json({ success: true, message: 'Face indexed and stored successfully' });
}catch(error){cov_zmmj4byiu().s[29]++;console.error('Error:',error);cov_zmmj4byiu().s[30]++;return"internal server error";//res.status(500).json({ success: false, message: 'Internal server error' });
}finally{cov_zmmj4byiu().s[31]++;// Close MongoDB client
if(client){cov_zmmj4byiu().b[7][0]++;cov_zmmj4byiu().s[32]++;await client.close();}else{cov_zmmj4byiu().b[7][1]++;}}}async function rejectRequest(id){cov_zmmj4byiu().f[1]++;cov_zmmj4byiu().s[33]++;try{const client=(cov_zmmj4byiu().s[34]++,await mongoClient.connect());const db=(cov_zmmj4byiu().s[35]++,client.db('facerecognition'));// Update the request status to "rejected" for the given object ID
const result=(cov_zmmj4byiu().s[36]++,await db.collection('reg_req').updateOne({_id:new ObjectId(id)},{$set:{request:'rejected'}}));// Close MongoDB client
cov_zmmj4byiu().s[37]++;await client.close();cov_zmmj4byiu().s[38]++;return"request rejected successfully";//res.status(200).json({ success: true, message: 'Request rejected successfully' });
}catch(error){cov_zmmj4byiu().s[39]++;console.error('Error:',error);cov_zmmj4byiu().s[40]++;return"Internal Server Error";//res.status(500).json({ success: false, message: 'Internal server error' });
}}cov_zmmj4byiu().s[41]++;module.exports={indexFacesAndStore,rejectRequest};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,