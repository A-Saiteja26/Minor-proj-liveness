function cov_6k9hxa5hu(){var path="/home/teja/saiteja/minor_pro/test/samp.spec.js";var hash="5e2e25fd0deaac140407cb77424e7a16b1ab3d67";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/test/samp.spec.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:14},end:{line:3,column:30}},"3":{start:{line:4,column:15},end:{line:4,column:26}},"4":{start:{line:5,column:12},end:{line:5,column:30}},"5":{start:{line:6,column:0},end:{line:6,column:19}},"6":{start:{line:7,column:41},end:{line:7,column:80}},"7":{start:{line:9,column:0},end:{line:46,column:3}},"8":{start:{line:12,column:4},end:{line:20,column:7}},"9":{start:{line:13,column:8},end:{line:13,column:40}},"10":{start:{line:21,column:4},end:{line:23,column:6}},"11":{start:{line:22,column:8},end:{line:22,column:26}},"12":{start:{line:24,column:4},end:{line:32,column:7}},"13":{start:{line:25,column:8},end:{line:27,column:11}},"14":{start:{line:29,column:24},end:{line:29,column:49}},"15":{start:{line:30,column:8},end:{line:30,column:31}},"16":{start:{line:31,column:8},end:{line:31,column:35}},"17":{start:{line:34,column:4},end:{line:45,column:7}},"18":{start:{line:35,column:22},end:{line:35,column:45}},"19":{start:{line:36,column:8},end:{line:38,column:11}},"20":{start:{line:39,column:8},end:{line:44,column:9}},"21":{start:{line:40,column:19},end:{line:40,column:44}},"22":{start:{line:41,column:8},end:{line:41,column:29}},"23":{start:{line:43,column:12},end:{line:43,column:30}},"24":{start:{line:49,column:0},end:{line:156,column:3}},"25":{start:{line:52,column:4},end:{line:54,column:7}},"26":{start:{line:53,column:8},end:{line:53,column:40}},"27":{start:{line:56,column:4},end:{line:58,column:7}},"28":{start:{line:57,column:8},end:{line:57,column:26}},"29":{start:{line:60,column:4},end:{line:100,column:7}},"30":{start:{line:62,column:20},end:{line:66,column:9}},"31":{start:{line:68,column:20},end:{line:72,column:9}},"32":{start:{line:73,column:8},end:{line:82,column:11}},"33":{start:{line:75,column:29},end:{line:77,column:17}},"34":{start:{line:78,column:16},end:{line:80,column:22}},"35":{start:{line:79,column:20},end:{line:79,column:41}},"36":{start:{line:96,column:8},end:{line:96,column:36}},"37":{start:{line:98,column:8},end:{line:98,column:48}},"38":{start:{line:99,column:8},end:{line:99,column:89}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:30},end:{line:9,column:31}},loc:{start:{line:9,column:36},end:{line:46,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:15},end:{line:12,column:16}},loc:{start:{line:12,column:21},end:{line:20,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:14},end:{line:21,column:15}},loc:{start:{line:21,column:18},end:{line:23,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:24,column:72},end:{line:24,column:73}},loc:{start:{line:24,column:84},end:{line:32,column:5}},line:24},"4":{name:"(anonymous_4)",decl:{start:{line:34,column:67},end:{line:34,column:68}},loc:{start:{line:34,column:79},end:{line:45,column:5}},line:34},"5":{name:"(anonymous_5)",decl:{start:{line:49,column:24},end:{line:49,column:25}},loc:{start:{line:49,column:30},end:{line:156,column:1}},line:49},"6":{name:"(anonymous_6)",decl:{start:{line:52,column:15},end:{line:52,column:16}},loc:{start:{line:52,column:21},end:{line:54,column:5}},line:52},"7":{name:"(anonymous_7)",decl:{start:{line:56,column:14},end:{line:56,column:15}},loc:{start:{line:56,column:20},end:{line:58,column:5}},line:56},"8":{name:"(anonymous_8)",decl:{start:{line:60,column:67},end:{line:60,column:68}},loc:{start:{line:60,column:79},end:{line:100,column:5}},line:60},"9":{name:"(anonymous_9)",decl:{start:{line:74,column:68},end:{line:74,column:69}},loc:{start:{line:74,column:90},end:{line:81,column:13}},line:74},"10":{name:"(anonymous_10)",decl:{start:{line:78,column:27},end:{line:78,column:28}},loc:{start:{line:78,column:33},end:{line:80,column:17}},line:78}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5e2e25fd0deaac140407cb77424e7a16b1ab3d67"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_6k9hxa5hu=function(){return actualCoverage;};}return actualCoverage;}cov_6k9hxa5hu();const chai=(cov_6k9hxa5hu().s[0]++,require('chai'));const chaiHttp=(cov_6k9hxa5hu().s[1]++,require('chai-http'));const sinon=(cov_6k9hxa5hu().s[2]++,require('sinon'));const expect=(cov_6k9hxa5hu().s[3]++,chai.expect);const AWS=(cov_6k9hxa5hu().s[4]++,require('aws-sdk'));cov_6k9hxa5hu().s[5]++;chai.use(chaiHttp);const{createLiveSession,getLiveness}=(cov_6k9hxa5hu().s[6]++,require('../controller/liveController'));// Assuming your function is in a file named 'recogRoutes.js'
cov_6k9hxa5hu().s[7]++;describe('createLiveSession',()=>{cov_6k9hxa5hu().f[0]++;let sandbox;cov_6k9hxa5hu().s[8]++;beforeEach(()=>{cov_6k9hxa5hu().f[1]++;cov_6k9hxa5hu().s[9]++;sandbox=sinon.createSandbox();// rekognitionMock = {
//     createFaceLivenessSession: sinon.stub().returnsThis(),
//     promise: sinon.stub().resolves({ SessionId: 'mockSessionId' })
// };
});cov_6k9hxa5hu().s[10]++;afterEach(()=>{cov_6k9hxa5hu().f[2]++;cov_6k9hxa5hu().s[11]++;sandbox.restore();});cov_6k9hxa5hu().s[12]++;it('should call createFaceLivenessSession with correct parameters',async()=>{cov_6k9hxa5hu().f[3]++;cov_6k9hxa5hu().s[13]++;sandbox.stub(AWS,'Rekognition').returns({createFaceLivenessSession:sandbox.stub().resolves({SessionId:'mockSessionId'})});const SessionId=(cov_6k9hxa5hu().s[14]++,await createLiveSession());cov_6k9hxa5hu().s[15]++;console.log(SessionId);cov_6k9hxa5hu().s[16]++;expect(SessionId).to.exist;});cov_6k9hxa5hu().s[17]++;it('should handle errors thrown by createFaceLivenessSession',async()=>{cov_6k9hxa5hu().f[4]++;const error=(cov_6k9hxa5hu().s[18]++,new Error('Mock error'));cov_6k9hxa5hu().s[19]++;sandbox.stub(AWS,'Rekognition').returns({createFaceLivenessSession:sandbox.stub().throws(error)});cov_6k9hxa5hu().s[20]++;try{const res=(cov_6k9hxa5hu().s[21]++,await createLiveSession());cov_6k9hxa5hu().s[22]++;expect(res).to.exist;}catch(err){cov_6k9hxa5hu().s[23]++;assert.fail(error);}});});cov_6k9hxa5hu().s[24]++;describe('getLiveness',()=>{cov_6k9hxa5hu().f[5]++;let sandbox;cov_6k9hxa5hu().s[25]++;beforeEach(()=>{cov_6k9hxa5hu().f[6]++;cov_6k9hxa5hu().s[26]++;sandbox=sinon.createSandbox();});cov_6k9hxa5hu().s[27]++;afterEach(()=>{cov_6k9hxa5hu().f[7]++;cov_6k9hxa5hu().s[28]++;sandbox.restore();});cov_6k9hxa5hu().s[29]++;it('should send isLive true if Confidence is greater than 70',async()=>{cov_6k9hxa5hu().f[8]++;//const rekognition = new AWS.Rekognition();
const req=(cov_6k9hxa5hu().s[30]++,{query:{sessionId:'c8c23582-d279-4310-970d-1cb173d7c142'}});const res=(cov_6k9hxa5hu().s[31]++,{send:sandbox.stub(),json:sandbox.stub()});cov_6k9hxa5hu().s[32]++;sandbox.stub(AWS,'Rekognition').returns({getFaceLivenessSessionResults:sandbox.stub().callsFake((params,callback)=>{cov_6k9hxa5hu().f[9]++;const data=(cov_6k9hxa5hu().s[33]++,{Confidence:80});cov_6k9hxa5hu().s[34]++;setTimeout(()=>{cov_6k9hxa5hu().f[10]++;cov_6k9hxa5hu().s[35]++;callback(null,data);},0);})});// //sandbox.stub(AWS.Rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//     const data = {
//         Confidence: 80 
//     };
//     callback(null, data);
// });
// const data = {
//             Confidence: 80
//         };
//         sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//             callback(new Error('Mock error'));
//         });
cov_6k9hxa5hu().s[36]++;await getLiveness(req,res);cov_6k9hxa5hu().s[37]++;expect(res.send.calledOnce).to.be.false;cov_6k9hxa5hu().s[38]++;expect(res.send.calledWithExactly({isLive:true,confidence:80})).to.be.false;});// it('should send isLive false if Confidence is less than or equal to 70', async () => {
//     const req = {
//         query: {
//             sessionId: 'mockSessionId'
//         }
//     };
//     const res = {
//         send: sandbox.stub()
//     };
//     // Stub rekognition.getFaceLivenessSessionResults to return mock data
//     sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//         const data = {
//             Confidence: 65 // Confidence less than or equal to 70
//         };
//         callback(null, data);
//     });
//     await getLiveness(req, res);
//     expect(res.send.calledOnce).to.be.true;
//     expect(res.send.calledWithExactly({ isLive: false, confidence: 65 })).to.be.true;
// });
// it('should send an error response if an error occurs during execution', async () => {
//     const req = {
//         query: {
//             sessionId: 'mockSessionId'
//         }
//     };
//     const res = {
//         send: sandbox.stub(),
//         json: sandbox.stub()
//     };
//     // Stub rekognition.getFaceLivenessSessionResults to simulate an error
//     sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//         callback(new Error('Mock error'));
//     });
//     try {
//         await getLiveness(req, res);
//     } catch (error) {
//         // Error should be caught and handled within the function
//         expect(error.message).to.equal('Internal Server Error');
//     }
//     // Expect an error response to be sent
//     expect(res.json.calledOnce).to.be.true;
//     expect(res.json.calledWithExactly({ error: 'ERRROr' })).to.be.true;
// });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNms5aHhhNWh1IiwiYWN0dWFsQ292ZXJhZ2UiLCJjaGFpIiwicyIsInJlcXVpcmUiLCJjaGFpSHR0cCIsInNpbm9uIiwiZXhwZWN0IiwiQVdTIiwidXNlIiwiY3JlYXRlTGl2ZVNlc3Npb24iLCJnZXRMaXZlbmVzcyIsImRlc2NyaWJlIiwiZiIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwiY3JlYXRlU2FuZGJveCIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsInN0dWIiLCJyZXR1cm5zIiwiY3JlYXRlRmFjZUxpdmVuZXNzU2Vzc2lvbiIsInJlc29sdmVzIiwiU2Vzc2lvbklkIiwiY29uc29sZSIsImxvZyIsInRvIiwiZXhpc3QiLCJlcnJvciIsIkVycm9yIiwidGhyb3dzIiwicmVzIiwiZXJyIiwiYXNzZXJ0IiwiZmFpbCIsInJlcSIsInF1ZXJ5Iiwic2Vzc2lvbklkIiwic2VuZCIsImpzb24iLCJnZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cyIsImNhbGxzRmFrZSIsInBhcmFtcyIsImNhbGxiYWNrIiwiZGF0YSIsIkNvbmZpZGVuY2UiLCJzZXRUaW1lb3V0IiwiY2FsbGVkT25jZSIsImJlIiwiZmFsc2UiLCJjYWxsZWRXaXRoRXhhY3RseSIsImlzTGl2ZSIsImNvbmZpZGVuY2UiXSwic291cmNlcyI6WyJzYW1wLnNwZWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2hhaSA9IHJlcXVpcmUoJ2NoYWknKTtcbmNvbnN0IGNoYWlIdHRwID0gcmVxdWlyZSgnY2hhaS1odHRwJyk7XG5jb25zdCBzaW5vbiA9IHJlcXVpcmUoJ3Npbm9uJyk7XG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbmNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmNoYWkudXNlKGNoYWlIdHRwKTtcbmNvbnN0IHsgY3JlYXRlTGl2ZVNlc3Npb24sZ2V0TGl2ZW5lc3N9ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlci9saXZlQ29udHJvbGxlcicpOyAvLyBBc3N1bWluZyB5b3VyIGZ1bmN0aW9uIGlzIGluIGEgZmlsZSBuYW1lZCAncmVjb2dSb3V0ZXMuanMnXG5cbmRlc2NyaWJlKCdjcmVhdGVMaXZlU2Vzc2lvbicsICgpID0+IHtcbiAgICBsZXQgc2FuZGJveDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBzYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gcmVrb2duaXRpb25Nb2NrID0ge1xuICAgICAgICAvLyAgICAgY3JlYXRlRmFjZUxpdmVuZXNzU2Vzc2lvbjogc2lub24uc3R1YigpLnJldHVybnNUaGlzKCksXG4gICAgICAgIC8vICAgICBwcm9taXNlOiBzaW5vbi5zdHViKCkucmVzb2x2ZXMoeyBTZXNzaW9uSWQ6ICdtb2NrU2Vzc2lvbklkJyB9KVxuICAgICAgICAvLyB9O1xuIFxuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKT0+e1xuICAgICAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgICB9KVxuICAgIGl0KCdzaG91bGQgY2FsbCBjcmVhdGVGYWNlTGl2ZW5lc3NTZXNzaW9uIHdpdGggY29ycmVjdCBwYXJhbWV0ZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBzYW5kYm94LnN0dWIoQVdTLCAnUmVrb2duaXRpb24nKS5yZXR1cm5zKHtcbiAgICAgICAgICAgIGNyZWF0ZUZhY2VMaXZlbmVzc1Nlc3Npb246IHNhbmRib3guc3R1YigpLnJlc29sdmVzKHsgU2Vzc2lvbklkOiAnbW9ja1Nlc3Npb25JZCcgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgU2Vzc2lvbklkPWF3YWl0IGNyZWF0ZUxpdmVTZXNzaW9uKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFNlc3Npb25JZCk7XG4gICAgICAgIGV4cGVjdChTZXNzaW9uSWQpLnRvLmV4aXN0O1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIHRocm93biBieSBjcmVhdGVGYWNlTGl2ZW5lc3NTZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignTW9jayBlcnJvcicpO1xuICAgICAgICBzYW5kYm94LnN0dWIoQVdTLCAnUmVrb2duaXRpb24nKS5yZXR1cm5zKHtcbiAgICAgICAgICAgIGNyZWF0ZUZhY2VMaXZlbmVzc1Nlc3Npb246IHNhbmRib3guc3R1YigpLnRocm93cyhlcnJvcilcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeXtcbiAgICAgICAgY29uc3QgcmVzPSBhd2FpdCBjcmVhdGVMaXZlU2Vzc2lvbigpO1xuICAgICAgICBleHBlY3QocmVzKS50by5leGlzdDt9XG4gICAgICAgIGNhdGNoKGVycil7XG4gICAgICAgICAgICBhc3NlcnQuZmFpbChlcnJvcilcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cblxuZGVzY3JpYmUoJ2dldExpdmVuZXNzJywgKCkgPT4ge1xuICAgIGxldCBzYW5kYm94O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHNhbmRib3ggPSBzaW5vbi5jcmVhdGVTYW5kYm94KCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VuZCBpc0xpdmUgdHJ1ZSBpZiBDb25maWRlbmNlIGlzIGdyZWF0ZXIgdGhhbiA3MCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy9jb25zdCByZWtvZ25pdGlvbiA9IG5ldyBBV1MuUmVrb2duaXRpb24oKTtcbiAgICAgICAgY29uc3QgcmVxID0ge1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6ICdjOGMyMzU4Mi1kMjc5LTQzMTAtOTcwZC0xY2IxNzNkN2MxNDInXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgc2VuZDogc2FuZGJveC5zdHViKCksXG4gICAgICAgICAgICBqc29uOnNhbmRib3guc3R1YigpXG5cbiAgICAgICAgfTtcbiAgICAgICAgc2FuZGJveC5zdHViKEFXUywgJ1Jla29nbml0aW9uJykucmV0dXJucyh7XG4gICAgICAgICAgICBnZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0czogc2FuZGJveC5zdHViKCkuY2FsbHNGYWtlKChwYXJhbXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgQ29uZmlkZW5jZTogODAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIC8vc2FuZGJveC5zdHViKEFXUy5SZWtvZ25pdGlvbiwgJ2dldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzJykuY2FsbHNGYWtlKChwYXJhbXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIC8vICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAvLyAgICAgICAgIENvbmZpZGVuY2U6IDgwIFxuICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgLy8gICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gY29uc3QgZGF0YSA9IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgQ29uZmlkZW5jZTogODBcbiAgICAgICAgLy8gICAgICAgICB9O1xuICAgICAgICAvLyAgICAgICAgIHNhbmRib3guc3R1YihyZWtvZ25pdGlvbiwgJ2dldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzJykuY2FsbHNGYWtlKChwYXJhbXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTW9jayBlcnJvcicpKTtcbiAgICAgICAgLy8gICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgZ2V0TGl2ZW5lc3MocmVxLCByZXMpO1xuXG4gICAgICAgIGV4cGVjdChyZXMuc2VuZC5jYWxsZWRPbmNlKS50by5iZS5mYWxzZTtcbiAgICAgICAgZXhwZWN0KHJlcy5zZW5kLmNhbGxlZFdpdGhFeGFjdGx5KHsgaXNMaXZlOiB0cnVlLCBjb25maWRlbmNlOiA4MCB9KSkudG8uYmUuZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvLyBpdCgnc2hvdWxkIHNlbmQgaXNMaXZlIGZhbHNlIGlmIENvbmZpZGVuY2UgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDcwJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vICAgICBjb25zdCByZXEgPSB7XG4gICAgLy8gICAgICAgICBxdWVyeToge1xuICAgIC8vICAgICAgICAgICAgIHNlc3Npb25JZDogJ21vY2tTZXNzaW9uSWQnXG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH07XG5cbiAgICAvLyAgICAgY29uc3QgcmVzID0ge1xuICAgIC8vICAgICAgICAgc2VuZDogc2FuZGJveC5zdHViKClcbiAgICAvLyAgICAgfTtcblxuICAgIC8vICAgICAvLyBTdHViIHJla29nbml0aW9uLmdldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzIHRvIHJldHVybiBtb2NrIGRhdGFcbiAgICAgICAgXG4gICAgLy8gICAgIHNhbmRib3guc3R1YihyZWtvZ25pdGlvbiwgJ2dldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzJykuY2FsbHNGYWtlKChwYXJhbXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgLy8gICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgIC8vICAgICAgICAgICAgIENvbmZpZGVuY2U6IDY1IC8vIENvbmZpZGVuY2UgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDcwXG4gICAgLy8gICAgICAgICB9O1xuICAgIC8vICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgLy8gICAgIH0pO1xuXG4gICAgLy8gICAgIGF3YWl0IGdldExpdmVuZXNzKHJlcSwgcmVzKTtcblxuICAgIC8vICAgICBleHBlY3QocmVzLnNlbmQuY2FsbGVkT25jZSkudG8uYmUudHJ1ZTtcbiAgICAvLyAgICAgZXhwZWN0KHJlcy5zZW5kLmNhbGxlZFdpdGhFeGFjdGx5KHsgaXNMaXZlOiBmYWxzZSwgY29uZmlkZW5jZTogNjUgfSkpLnRvLmJlLnRydWU7XG4gICAgLy8gfSk7XG5cbiAgICAvLyBpdCgnc2hvdWxkIHNlbmQgYW4gZXJyb3IgcmVzcG9uc2UgaWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBleGVjdXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gICAgIGNvbnN0IHJlcSA9IHtcbiAgICAvLyAgICAgICAgIHF1ZXJ5OiB7XG4gICAgLy8gICAgICAgICAgICAgc2Vzc2lvbklkOiAnbW9ja1Nlc3Npb25JZCdcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfTtcblxuICAgIC8vICAgICBjb25zdCByZXMgPSB7XG4gICAgLy8gICAgICAgICBzZW5kOiBzYW5kYm94LnN0dWIoKSxcbiAgICAvLyAgICAgICAgIGpzb246IHNhbmRib3guc3R1YigpXG4gICAgLy8gICAgIH07XG5cbiAgICAvLyAgICAgLy8gU3R1YiByZWtvZ25pdGlvbi5nZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cyB0byBzaW11bGF0ZSBhbiBlcnJvclxuICAgIC8vICAgICBzYW5kYm94LnN0dWIocmVrb2duaXRpb24sICdnZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cycpLmNhbGxzRmFrZSgocGFyYW1zLCBjYWxsYmFjaykgPT4ge1xuICAgIC8vICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdNb2NrIGVycm9yJykpO1xuICAgIC8vICAgICB9KTtcblxuICAgIC8vICAgICB0cnkge1xuICAgIC8vICAgICAgICAgYXdhaXQgZ2V0TGl2ZW5lc3MocmVxLCByZXMpO1xuICAgIC8vICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vICAgICAgICAgLy8gRXJyb3Igc2hvdWxkIGJlIGNhdWdodCBhbmQgaGFuZGxlZCB3aXRoaW4gdGhlIGZ1bmN0aW9uXG4gICAgLy8gICAgICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG8uZXF1YWwoJ0ludGVybmFsIFNlcnZlciBFcnJvcicpO1xuICAgIC8vICAgICB9XG5cbiAgICAvLyAgICAgLy8gRXhwZWN0IGFuIGVycm9yIHJlc3BvbnNlIHRvIGJlIHNlbnRcbiAgICAvLyAgICAgZXhwZWN0KHJlcy5qc29uLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgLy8gICAgIGV4cGVjdChyZXMuanNvbi5jYWxsZWRXaXRoRXhhY3RseSh7IGVycm9yOiAnRVJSUk9yJyB9KSkudG8uYmUudHJ1ZTtcbiAgICAvLyB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IndsSkFlWTtBQUFBQSxhQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGFBQUEsR0FmWixLQUFNLENBQUFFLElBQUksRUFBQUYsYUFBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFDNUIsS0FBTSxDQUFBQyxRQUFRLEVBQUFMLGFBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQ3JDLEtBQU0sQ0FBQUUsS0FBSyxFQUFBTixhQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUM5QixLQUFNLENBQUFHLE1BQU0sRUFBQVAsYUFBQSxHQUFBRyxDQUFBLE1BQUdELElBQUksQ0FBQ0ssTUFBTSxFQUMxQixLQUFNLENBQUFDLEdBQUcsRUFBQVIsYUFBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBQ0osYUFBQSxHQUFBRyxDQUFBLE1BQy9CRCxJQUFJLENBQUNPLEdBQUcsQ0FBQ0osUUFBUSxDQUFDLENBQ2xCLEtBQU0sQ0FBRUssaUJBQWlCLENBQUNDLFdBQVcsQ0FBQyxFQUFBWCxhQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLDhCQUE4QixDQUFDLEVBQUU7QUFBQUosYUFBQSxHQUFBRyxDQUFBLE1BRWxGUyxRQUFRLENBQUMsbUJBQW1CLENBQUUsSUFBTSxDQUFBWixhQUFBLEdBQUFhLENBQUEsTUFDaEMsR0FBSSxDQUFBQyxPQUFPLENBQUNkLGFBQUEsR0FBQUcsQ0FBQSxNQUVaWSxVQUFVLENBQUMsSUFBTSxDQUFBZixhQUFBLEdBQUFhLENBQUEsTUFBQWIsYUFBQSxHQUFBRyxDQUFBLE1BQ2JXLE9BQU8sQ0FBR1IsS0FBSyxDQUFDVSxhQUFhLENBQUMsQ0FBQyxDQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUVKLENBQUMsQ0FBQyxDQUFDaEIsYUFBQSxHQUFBRyxDQUFBLE9BQ0hjLFNBQVMsQ0FBQyxJQUFJLENBQUFqQixhQUFBLEdBQUFhLENBQUEsTUFBQWIsYUFBQSxHQUFBRyxDQUFBLE9BQ1ZXLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDLENBQUMsQ0FDckIsQ0FBQyxDQUFDLENBQUFsQixhQUFBLEdBQUFHLENBQUEsT0FDRmdCLEVBQUUsQ0FBQywrREFBK0QsQ0FBRSxTQUFZLENBQUFuQixhQUFBLEdBQUFhLENBQUEsTUFBQWIsYUFBQSxHQUFBRyxDQUFBLE9BQzVFVyxPQUFPLENBQUNNLElBQUksQ0FBQ1osR0FBRyxDQUFFLGFBQWEsQ0FBQyxDQUFDYSxPQUFPLENBQUMsQ0FDckNDLHlCQUF5QixDQUFFUixPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQyxDQUFFQyxTQUFTLENBQUUsZUFBZ0IsQ0FBQyxDQUNyRixDQUFDLENBQUMsQ0FFRixLQUFNLENBQUFBLFNBQVMsRUFBQXhCLGFBQUEsR0FBQUcsQ0FBQSxPQUFDLEtBQU0sQ0FBQU8saUJBQWlCLENBQUMsQ0FBQyxFQUFDVixhQUFBLEdBQUFHLENBQUEsT0FDMUNzQixPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDLENBQUN4QixhQUFBLEdBQUFHLENBQUEsT0FDdkJJLE1BQU0sQ0FBQ2lCLFNBQVMsQ0FBQyxDQUFDRyxFQUFFLENBQUNDLEtBQUssQ0FDOUIsQ0FBQyxDQUFDLENBQUM1QixhQUFBLEdBQUFHLENBQUEsT0FFSGdCLEVBQUUsQ0FBQywwREFBMEQsQ0FBRSxTQUFZLENBQUFuQixhQUFBLEdBQUFhLENBQUEsTUFDdkUsS0FBTSxDQUFBZ0IsS0FBSyxFQUFBN0IsYUFBQSxHQUFBRyxDQUFBLE9BQUcsR0FBSSxDQUFBMkIsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDOUIsYUFBQSxHQUFBRyxDQUFBLE9BQ3RDVyxPQUFPLENBQUNNLElBQUksQ0FBQ1osR0FBRyxDQUFFLGFBQWEsQ0FBQyxDQUFDYSxPQUFPLENBQUMsQ0FDckNDLHlCQUF5QixDQUFFUixPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLENBQUNXLE1BQU0sQ0FBQ0YsS0FBSyxDQUMxRCxDQUFDLENBQUMsQ0FBQzdCLGFBQUEsR0FBQUcsQ0FBQSxPQUNILEdBQUcsQ0FDSCxLQUFNLENBQUE2QixHQUFHLEVBQUFoQyxhQUFBLEdBQUFHLENBQUEsT0FBRSxLQUFNLENBQUFPLGlCQUFpQixDQUFDLENBQUMsRUFBQ1YsYUFBQSxHQUFBRyxDQUFBLE9BQ3JDSSxNQUFNLENBQUN5QixHQUFHLENBQUMsQ0FBQ0wsRUFBRSxDQUFDQyxLQUFLLENBQUMsQ0FDckIsTUFBTUssR0FBRyxDQUFDLENBQUFqQyxhQUFBLEdBQUFHLENBQUEsT0FDTitCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTixLQUFLLENBQUMsQ0FDdEIsQ0FDSixDQUFDLENBQUMsQ0FDTixDQUFDLENBQUMsQ0FBQzdCLGFBQUEsR0FBQUcsQ0FBQSxPQUdIUyxRQUFRLENBQUMsYUFBYSxDQUFFLElBQU0sQ0FBQVosYUFBQSxHQUFBYSxDQUFBLE1BQzFCLEdBQUksQ0FBQUMsT0FBTyxDQUFDZCxhQUFBLEdBQUFHLENBQUEsT0FFWlksVUFBVSxDQUFDLElBQU0sQ0FBQWYsYUFBQSxHQUFBYSxDQUFBLE1BQUFiLGFBQUEsR0FBQUcsQ0FBQSxPQUNiVyxPQUFPLENBQUdSLEtBQUssQ0FBQ1UsYUFBYSxDQUFDLENBQUMsQ0FDbkMsQ0FBQyxDQUFDLENBQUNoQixhQUFBLEdBQUFHLENBQUEsT0FFSGMsU0FBUyxDQUFDLElBQU0sQ0FBQWpCLGFBQUEsR0FBQWEsQ0FBQSxNQUFBYixhQUFBLEdBQUFHLENBQUEsT0FDWlcsT0FBTyxDQUFDSSxPQUFPLENBQUMsQ0FBQyxDQUNyQixDQUFDLENBQUMsQ0FBQ2xCLGFBQUEsR0FBQUcsQ0FBQSxPQUVIZ0IsRUFBRSxDQUFDLDBEQUEwRCxDQUFFLFNBQVksQ0FBQW5CLGFBQUEsR0FBQWEsQ0FBQSxNQUN2RTtBQUNBLEtBQU0sQ0FBQXVCLEdBQUcsRUFBQXBDLGFBQUEsR0FBQUcsQ0FBQSxPQUFHLENBQ1JrQyxLQUFLLENBQUUsQ0FDSEMsU0FBUyxDQUFFLHNDQUNmLENBQ0osQ0FBQyxFQUVELEtBQU0sQ0FBQU4sR0FBRyxFQUFBaEMsYUFBQSxHQUFBRyxDQUFBLE9BQUcsQ0FDUm9DLElBQUksQ0FBRXpCLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLENBQUMsQ0FDcEJvQixJQUFJLENBQUMxQixPQUFPLENBQUNNLElBQUksQ0FBQyxDQUV0QixDQUFDLEVBQUNwQixhQUFBLEdBQUFHLENBQUEsT0FDRlcsT0FBTyxDQUFDTSxJQUFJLENBQUNaLEdBQUcsQ0FBRSxhQUFhLENBQUMsQ0FBQ2EsT0FBTyxDQUFDLENBQ3JDb0IsNkJBQTZCLENBQUUzQixPQUFPLENBQUNNLElBQUksQ0FBQyxDQUFDLENBQUNzQixTQUFTLENBQUMsQ0FBQ0MsTUFBTSxDQUFFQyxRQUFRLEdBQUssQ0FBQTVDLGFBQUEsR0FBQWEsQ0FBQSxNQUMxRSxLQUFNLENBQUFnQyxJQUFJLEVBQUE3QyxhQUFBLEdBQUFHLENBQUEsT0FBRyxDQUNUMkMsVUFBVSxDQUFFLEVBQ2hCLENBQUMsRUFBQzlDLGFBQUEsR0FBQUcsQ0FBQSxPQUNGNEMsVUFBVSxDQUFDLElBQU0sQ0FBQS9DLGFBQUEsR0FBQWEsQ0FBQSxPQUFBYixhQUFBLEdBQUFHLENBQUEsT0FDYnlDLFFBQVEsQ0FBQyxJQUFJLENBQUVDLElBQUksQ0FBQyxDQUN4QixDQUFDLENBQUUsQ0FBQyxDQUFDLENBQ1QsQ0FBQyxDQUNMLENBQUMsQ0FBQyxDQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBN0MsYUFBQSxHQUFBRyxDQUFBLE9BQ0EsS0FBTSxDQUFBUSxXQUFXLENBQUN5QixHQUFHLENBQUVKLEdBQUcsQ0FBQyxDQUFDaEMsYUFBQSxHQUFBRyxDQUFBLE9BRTVCSSxNQUFNLENBQUN5QixHQUFHLENBQUNPLElBQUksQ0FBQ1MsVUFBVSxDQUFDLENBQUNyQixFQUFFLENBQUNzQixFQUFFLENBQUNDLEtBQUssQ0FBQ2xELGFBQUEsR0FBQUcsQ0FBQSxPQUN4Q0ksTUFBTSxDQUFDeUIsR0FBRyxDQUFDTyxJQUFJLENBQUNZLGlCQUFpQixDQUFDLENBQUVDLE1BQU0sQ0FBRSxJQUFJLENBQUVDLFVBQVUsQ0FBRSxFQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMxQixFQUFFLENBQUNzQixFQUFFLENBQUNDLEtBQUssQ0FDcEYsQ0FBQyxDQUFDLENBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==