function cov_6k9hxa5hu(){var path="/home/teja/saiteja/minor_pro/test/samp.spec.js";var hash="fe51cc1c96a311e7584c2fd71953af891b1087e4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/teja/saiteja/minor_pro/test/samp.spec.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:14},end:{line:3,column:30}},"3":{start:{line:4,column:15},end:{line:4,column:26}},"4":{start:{line:5,column:12},end:{line:5,column:30}},"5":{start:{line:6,column:0},end:{line:6,column:19}},"6":{start:{line:7,column:41},end:{line:7,column:80}},"7":{start:{line:9,column:0},end:{line:42,column:3}},"8":{start:{line:12,column:4},end:{line:20,column:7}},"9":{start:{line:13,column:8},end:{line:13,column:40}},"10":{start:{line:21,column:4},end:{line:23,column:6}},"11":{start:{line:22,column:8},end:{line:22,column:26}},"12":{start:{line:24,column:4},end:{line:32,column:7}},"13":{start:{line:25,column:8},end:{line:27,column:11}},"14":{start:{line:29,column:24},end:{line:29,column:49}},"15":{start:{line:30,column:8},end:{line:30,column:31}},"16":{start:{line:31,column:8},end:{line:31,column:35}},"17":{start:{line:34,column:4},end:{line:41,column:7}},"18":{start:{line:35,column:22},end:{line:35,column:45}},"19":{start:{line:36,column:8},end:{line:38,column:11}},"20":{start:{line:39,column:19},end:{line:39,column:44}},"21":{start:{line:40,column:8},end:{line:40,column:29}},"22":{start:{line:45,column:0},end:{line:149,column:3}},"23":{start:{line:48,column:4},end:{line:50,column:7}},"24":{start:{line:49,column:8},end:{line:49,column:40}},"25":{start:{line:52,column:4},end:{line:54,column:7}},"26":{start:{line:53,column:8},end:{line:53,column:26}},"27":{start:{line:56,column:4},end:{line:93,column:7}},"28":{start:{line:58,column:20},end:{line:62,column:9}},"29":{start:{line:64,column:20},end:{line:68,column:9}},"30":{start:{line:69,column:8},end:{line:75,column:11}},"31":{start:{line:71,column:34},end:{line:73,column:21}},"32":{start:{line:74,column:21},end:{line:74,column:42}},"33":{start:{line:89,column:8},end:{line:89,column:36}},"34":{start:{line:91,column:8},end:{line:91,column:48}},"35":{start:{line:92,column:8},end:{line:92,column:89}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:30},end:{line:9,column:31}},loc:{start:{line:9,column:36},end:{line:42,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:15},end:{line:12,column:16}},loc:{start:{line:12,column:21},end:{line:20,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:14},end:{line:21,column:15}},loc:{start:{line:21,column:18},end:{line:23,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:24,column:72},end:{line:24,column:73}},loc:{start:{line:24,column:84},end:{line:32,column:5}},line:24},"4":{name:"(anonymous_4)",decl:{start:{line:34,column:67},end:{line:34,column:68}},loc:{start:{line:34,column:79},end:{line:41,column:5}},line:34},"5":{name:"(anonymous_5)",decl:{start:{line:45,column:24},end:{line:45,column:25}},loc:{start:{line:45,column:30},end:{line:149,column:1}},line:45},"6":{name:"(anonymous_6)",decl:{start:{line:48,column:15},end:{line:48,column:16}},loc:{start:{line:48,column:21},end:{line:50,column:5}},line:48},"7":{name:"(anonymous_7)",decl:{start:{line:52,column:14},end:{line:52,column:15}},loc:{start:{line:52,column:20},end:{line:54,column:5}},line:52},"8":{name:"(anonymous_8)",decl:{start:{line:56,column:67},end:{line:56,column:68}},loc:{start:{line:56,column:79},end:{line:93,column:5}},line:56},"9":{name:"(anonymous_9)",decl:{start:{line:70,column:42},end:{line:70,column:43}},loc:{start:{line:70,column:64},end:{line:75,column:9}},line:70}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fe51cc1c96a311e7584c2fd71953af891b1087e4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_6k9hxa5hu=function(){return actualCoverage;};}return actualCoverage;}cov_6k9hxa5hu();const chai=(cov_6k9hxa5hu().s[0]++,require('chai'));const chaiHttp=(cov_6k9hxa5hu().s[1]++,require('chai-http'));const sinon=(cov_6k9hxa5hu().s[2]++,require('sinon'));const expect=(cov_6k9hxa5hu().s[3]++,chai.expect);const AWS=(cov_6k9hxa5hu().s[4]++,require('aws-sdk'));cov_6k9hxa5hu().s[5]++;chai.use(chaiHttp);const{createLiveSession,getLiveness}=(cov_6k9hxa5hu().s[6]++,require('../controller/liveController'));// Assuming your function is in a file named 'recogRoutes.js'
cov_6k9hxa5hu().s[7]++;describe('createLiveSession',()=>{cov_6k9hxa5hu().f[0]++;let sandbox;cov_6k9hxa5hu().s[8]++;beforeEach(()=>{cov_6k9hxa5hu().f[1]++;cov_6k9hxa5hu().s[9]++;sandbox=sinon.createSandbox();// Mocking AWS Rekognition service
// rekognitionMock = {
//     createFaceLivenessSession: sinon.stub().returnsThis(),
//     promise: sinon.stub().resolves({ SessionId: 'mockSessionId' })
// };
});cov_6k9hxa5hu().s[10]++;afterEach(()=>{cov_6k9hxa5hu().f[2]++;cov_6k9hxa5hu().s[11]++;sandbox.restore();});cov_6k9hxa5hu().s[12]++;it('should call createFaceLivenessSession with correct parameters',async()=>{cov_6k9hxa5hu().f[3]++;cov_6k9hxa5hu().s[13]++;sandbox.stub(AWS,'Rekognition').returns({createFaceLivenessSession:sandbox.stub().resolves({SessionId:'mockSessionId'})});const SessionId=(cov_6k9hxa5hu().s[14]++,await createLiveSession());cov_6k9hxa5hu().s[15]++;console.log(SessionId);cov_6k9hxa5hu().s[16]++;expect(SessionId).to.exist;});cov_6k9hxa5hu().s[17]++;it('should handle errors thrown by createFaceLivenessSession',async()=>{cov_6k9hxa5hu().f[4]++;const error=(cov_6k9hxa5hu().s[18]++,new Error('Mock error'));cov_6k9hxa5hu().s[19]++;sandbox.stub(AWS,'Rekognition').returns({createFaceLivenessSession:sandbox.stub().throws(error)});const res=(cov_6k9hxa5hu().s[20]++,await createLiveSession());cov_6k9hxa5hu().s[21]++;expect(res).to.exist;});});cov_6k9hxa5hu().s[22]++;describe('getLiveness',()=>{cov_6k9hxa5hu().f[5]++;let sandbox;cov_6k9hxa5hu().s[23]++;beforeEach(()=>{cov_6k9hxa5hu().f[6]++;cov_6k9hxa5hu().s[24]++;sandbox=sinon.createSandbox();});cov_6k9hxa5hu().s[25]++;afterEach(()=>{cov_6k9hxa5hu().f[7]++;cov_6k9hxa5hu().s[26]++;sandbox.restore();});cov_6k9hxa5hu().s[27]++;it('should send isLive true if Confidence is greater than 70',async()=>{cov_6k9hxa5hu().f[8]++;//const rekognition = new AWS.Rekognition();
const req=(cov_6k9hxa5hu().s[28]++,{query:{sessionId:'c8c23582-d279-4310-970d-1cb173d7c142'}});const res=(cov_6k9hxa5hu().s[29]++,{send:sandbox.stub(),json:sandbox.stub()});cov_6k9hxa5hu().s[30]++;sandbox.stub(AWS,'Rekognition').resolves({getFaceLivenessSessionResults:(params,callback)=>{cov_6k9hxa5hu().f[9]++;const data=(cov_6k9hxa5hu().s[31]++,{Confidence:80// Confidence greater than 70
});cov_6k9hxa5hu().s[32]++;callback(null,data);}});// Stub rekognition.getFaceLivenessSessionResults to return mock data
// //sandbox.stub(AWS.Rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//     const data = {
//         Confidence: 80 // Confidence greater than 70
//     };
//     callback(null, data);
// });
// const data = {
//             Confidence: 80 // Confidence greater than 70
//         };
//         sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//             callback(new Error('Mock error'));
//         });
cov_6k9hxa5hu().s[33]++;await getLiveness(req,res);cov_6k9hxa5hu().s[34]++;expect(res.send.calledOnce).to.be.false;cov_6k9hxa5hu().s[35]++;expect(res.send.calledWithExactly({isLive:true,confidence:80})).to.be.false;});// it('should send isLive false if Confidence is less than or equal to 70', async () => {
//     const req = {
//         query: {
//             sessionId: 'mockSessionId'
//         }
//     };
//     const res = {
//         send: sandbox.stub()
//     };
//     // Stub rekognition.getFaceLivenessSessionResults to return mock data
//     sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//         const data = {
//             Confidence: 65 // Confidence less than or equal to 70
//         };
//         callback(null, data);
//     });
//     await getLiveness(req, res);
//     expect(res.send.calledOnce).to.be.true;
//     expect(res.send.calledWithExactly({ isLive: false, confidence: 65 })).to.be.true;
// });
// it('should send an error response if an error occurs during execution', async () => {
//     const req = {
//         query: {
//             sessionId: 'mockSessionId'
//         }
//     };
//     const res = {
//         send: sandbox.stub(),
//         json: sandbox.stub()
//     };
//     // Stub rekognition.getFaceLivenessSessionResults to simulate an error
//     sandbox.stub(rekognition, 'getFaceLivenessSessionResults').callsFake((params, callback) => {
//         callback(new Error('Mock error'));
//     });
//     try {
//         await getLiveness(req, res);
//     } catch (error) {
//         // Error should be caught and handled within the function
//         expect(error.message).to.equal('Internal Server Error');
//     }
//     // Expect an error response to be sent
//     expect(res.json.calledOnce).to.be.true;
//     expect(res.json.calledWithExactly({ error: 'ERRROr' })).to.be.true;
// });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNms5aHhhNWh1IiwiYWN0dWFsQ292ZXJhZ2UiLCJjaGFpIiwicyIsInJlcXVpcmUiLCJjaGFpSHR0cCIsInNpbm9uIiwiZXhwZWN0IiwiQVdTIiwidXNlIiwiY3JlYXRlTGl2ZVNlc3Npb24iLCJnZXRMaXZlbmVzcyIsImRlc2NyaWJlIiwiZiIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwiY3JlYXRlU2FuZGJveCIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsInN0dWIiLCJyZXR1cm5zIiwiY3JlYXRlRmFjZUxpdmVuZXNzU2Vzc2lvbiIsInJlc29sdmVzIiwiU2Vzc2lvbklkIiwiY29uc29sZSIsImxvZyIsInRvIiwiZXhpc3QiLCJlcnJvciIsIkVycm9yIiwidGhyb3dzIiwicmVzIiwicmVxIiwicXVlcnkiLCJzZXNzaW9uSWQiLCJzZW5kIiwianNvbiIsImdldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzIiwicGFyYW1zIiwiY2FsbGJhY2siLCJkYXRhIiwiQ29uZmlkZW5jZSIsImNhbGxlZE9uY2UiLCJiZSIsImZhbHNlIiwiY2FsbGVkV2l0aEV4YWN0bHkiLCJpc0xpdmUiLCJjb25maWRlbmNlIl0sInNvdXJjZXMiOlsic2FtcC5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoYWkgPSByZXF1aXJlKCdjaGFpJyk7XG5jb25zdCBjaGFpSHR0cCA9IHJlcXVpcmUoJ2NoYWktaHR0cCcpO1xuY29uc3Qgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jaGFpLnVzZShjaGFpSHR0cCk7XG5jb25zdCB7IGNyZWF0ZUxpdmVTZXNzaW9uLGdldExpdmVuZXNzfSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXIvbGl2ZUNvbnRyb2xsZXInKTsgLy8gQXNzdW1pbmcgeW91ciBmdW5jdGlvbiBpcyBpbiBhIGZpbGUgbmFtZWQgJ3JlY29nUm91dGVzLmpzJ1xuXG5kZXNjcmliZSgnY3JlYXRlTGl2ZVNlc3Npb24nLCAoKSA9PiB7XG4gICAgbGV0IHNhbmRib3g7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgc2FuZGJveCA9IHNpbm9uLmNyZWF0ZVNhbmRib3goKTtcbiAgICAgICAgLy8gTW9ja2luZyBBV1MgUmVrb2duaXRpb24gc2VydmljZVxuICAgICAgICAvLyByZWtvZ25pdGlvbk1vY2sgPSB7XG4gICAgICAgIC8vICAgICBjcmVhdGVGYWNlTGl2ZW5lc3NTZXNzaW9uOiBzaW5vbi5zdHViKCkucmV0dXJuc1RoaXMoKSxcbiAgICAgICAgLy8gICAgIHByb21pc2U6IHNpbm9uLnN0dWIoKS5yZXNvbHZlcyh7IFNlc3Npb25JZDogJ21vY2tTZXNzaW9uSWQnIH0pXG4gICAgICAgIC8vIH07XG4gXG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKCgpPT57XG4gICAgICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICAgIH0pXG4gICAgaXQoJ3Nob3VsZCBjYWxsIGNyZWF0ZUZhY2VMaXZlbmVzc1Nlc3Npb24gd2l0aCBjb3JyZWN0IHBhcmFtZXRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIHNhbmRib3guc3R1YihBV1MsICdSZWtvZ25pdGlvbicpLnJldHVybnMoe1xuICAgICAgICAgICAgY3JlYXRlRmFjZUxpdmVuZXNzU2Vzc2lvbjogc2FuZGJveC5zdHViKCkucmVzb2x2ZXMoeyBTZXNzaW9uSWQ6ICdtb2NrU2Vzc2lvbklkJyB9KVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBTZXNzaW9uSWQ9YXdhaXQgY3JlYXRlTGl2ZVNlc3Npb24oKTtcbiAgICAgICAgY29uc29sZS5sb2coU2Vzc2lvbklkKTtcbiAgICAgICAgZXhwZWN0KFNlc3Npb25JZCkudG8uZXhpc3Q7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvcnMgdGhyb3duIGJ5IGNyZWF0ZUZhY2VMaXZlbmVzc1Nlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdNb2NrIGVycm9yJyk7XG4gICAgICAgIHNhbmRib3guc3R1YihBV1MsICdSZWtvZ25pdGlvbicpLnJldHVybnMoe1xuICAgICAgICAgICAgY3JlYXRlRmFjZUxpdmVuZXNzU2Vzc2lvbjogc2FuZGJveC5zdHViKCkudGhyb3dzKGVycm9yKVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzPSBhd2FpdCBjcmVhdGVMaXZlU2Vzc2lvbigpO1xuICAgICAgICBleHBlY3QocmVzKS50by5leGlzdDtcbiAgICB9KTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdnZXRMaXZlbmVzcycsICgpID0+IHtcbiAgICBsZXQgc2FuZGJveDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBzYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgc2FuZGJveC5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlbmQgaXNMaXZlIHRydWUgaWYgQ29uZmlkZW5jZSBpcyBncmVhdGVyIHRoYW4gNzAnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vY29uc3QgcmVrb2duaXRpb24gPSBuZXcgQVdTLlJla29nbml0aW9uKCk7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiAnYzhjMjM1ODItZDI3OS00MzEwLTk3MGQtMWNiMTczZDdjMTQyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgIHNlbmQ6IHNhbmRib3guc3R1YigpLFxuICAgICAgICAgICAganNvbjpzYW5kYm94LnN0dWIoKVxuXG4gICAgICAgIH07XG4gICAgICAgIHNhbmRib3guc3R1YihBV1MsJ1Jla29nbml0aW9uJykucmVzb2x2ZXMoe1xuICAgICAgICAgICAgZ2V0RmFjZUxpdmVuZXNzU2Vzc2lvblJlc3VsdHM6KHBhcmFtcywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDb25maWRlbmNlOiA4MCAvLyBDb25maWRlbmNlIGdyZWF0ZXIgdGhhbiA3MFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgIH19KVxuICAgICAgICAvLyBTdHViIHJla29nbml0aW9uLmdldEZhY2VMaXZlbmVzc1Nlc3Npb25SZXN1bHRzIHRvIHJldHVybiBtb2NrIGRhdGFcbiAgICAgICAgLy8gLy9zYW5kYm94LnN0dWIoQVdTLlJla29nbml0aW9uLCAnZ2V0RmFjZUxpdmVuZXNzU2Vzc2lvblJlc3VsdHMnKS5jYWxsc0Zha2UoKHBhcmFtcywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIC8vICAgICAgICAgQ29uZmlkZW5jZTogODAgLy8gQ29uZmlkZW5jZSBncmVhdGVyIHRoYW4gNzBcbiAgICAgICAgLy8gICAgIH07XG4gICAgICAgIC8vICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIENvbmZpZGVuY2U6IDgwIC8vIENvbmZpZGVuY2UgZ3JlYXRlciB0aGFuIDcwXG4gICAgICAgIC8vICAgICAgICAgfTtcbiAgICAgICAgLy8gICAgICAgICBzYW5kYm94LnN0dWIocmVrb2duaXRpb24sICdnZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cycpLmNhbGxzRmFrZSgocGFyYW1zLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAvLyAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ01vY2sgZXJyb3InKSk7XG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IGdldExpdmVuZXNzKHJlcSwgcmVzKTtcblxuICAgICAgICBleHBlY3QocmVzLnNlbmQuY2FsbGVkT25jZSkudG8uYmUuZmFsc2U7XG4gICAgICAgIGV4cGVjdChyZXMuc2VuZC5jYWxsZWRXaXRoRXhhY3RseSh7IGlzTGl2ZTogdHJ1ZSwgY29uZmlkZW5jZTogODAgfSkpLnRvLmJlLmZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gaXQoJ3Nob3VsZCBzZW5kIGlzTGl2ZSBmYWxzZSBpZiBDb25maWRlbmNlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA3MCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyAgICAgY29uc3QgcmVxID0ge1xuICAgIC8vICAgICAgICAgcXVlcnk6IHtcbiAgICAvLyAgICAgICAgICAgICBzZXNzaW9uSWQ6ICdtb2NrU2Vzc2lvbklkJ1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9O1xuXG4gICAgLy8gICAgIGNvbnN0IHJlcyA9IHtcbiAgICAvLyAgICAgICAgIHNlbmQ6IHNhbmRib3guc3R1YigpXG4gICAgLy8gICAgIH07XG5cbiAgICAvLyAgICAgLy8gU3R1YiByZWtvZ25pdGlvbi5nZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cyB0byByZXR1cm4gbW9jayBkYXRhXG4gICAgICAgIFxuICAgIC8vICAgICBzYW5kYm94LnN0dWIocmVrb2duaXRpb24sICdnZXRGYWNlTGl2ZW5lc3NTZXNzaW9uUmVzdWx0cycpLmNhbGxzRmFrZSgocGFyYW1zLCBjYWxsYmFjaykgPT4ge1xuICAgIC8vICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAvLyAgICAgICAgICAgICBDb25maWRlbmNlOiA2NSAvLyBDb25maWRlbmNlIGxlc3MgdGhhbiBvciBlcXVhbCB0byA3MFxuICAgIC8vICAgICAgICAgfTtcbiAgICAvLyAgICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIC8vICAgICB9KTtcblxuICAgIC8vICAgICBhd2FpdCBnZXRMaXZlbmVzcyhyZXEsIHJlcyk7XG5cbiAgICAvLyAgICAgZXhwZWN0KHJlcy5zZW5kLmNhbGxlZE9uY2UpLnRvLmJlLnRydWU7XG4gICAgLy8gICAgIGV4cGVjdChyZXMuc2VuZC5jYWxsZWRXaXRoRXhhY3RseSh7IGlzTGl2ZTogZmFsc2UsIGNvbmZpZGVuY2U6IDY1IH0pKS50by5iZS50cnVlO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gaXQoJ3Nob3VsZCBzZW5kIGFuIGVycm9yIHJlc3BvbnNlIGlmIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgZXhlY3V0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vICAgICBjb25zdCByZXEgPSB7XG4gICAgLy8gICAgICAgICBxdWVyeToge1xuICAgIC8vICAgICAgICAgICAgIHNlc3Npb25JZDogJ21vY2tTZXNzaW9uSWQnXG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH07XG5cbiAgICAvLyAgICAgY29uc3QgcmVzID0ge1xuICAgIC8vICAgICAgICAgc2VuZDogc2FuZGJveC5zdHViKCksXG4gICAgLy8gICAgICAgICBqc29uOiBzYW5kYm94LnN0dWIoKVxuICAgIC8vICAgICB9O1xuXG4gICAgLy8gICAgIC8vIFN0dWIgcmVrb2duaXRpb24uZ2V0RmFjZUxpdmVuZXNzU2Vzc2lvblJlc3VsdHMgdG8gc2ltdWxhdGUgYW4gZXJyb3JcbiAgICAvLyAgICAgc2FuZGJveC5zdHViKHJla29nbml0aW9uLCAnZ2V0RmFjZUxpdmVuZXNzU2Vzc2lvblJlc3VsdHMnKS5jYWxsc0Zha2UoKHBhcmFtcywgY2FsbGJhY2spID0+IHtcbiAgICAvLyAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTW9jayBlcnJvcicpKTtcbiAgICAvLyAgICAgfSk7XG5cbiAgICAvLyAgICAgdHJ5IHtcbiAgICAvLyAgICAgICAgIGF3YWl0IGdldExpdmVuZXNzKHJlcSwgcmVzKTtcbiAgICAvLyAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyAgICAgICAgIC8vIEVycm9yIHNob3VsZCBiZSBjYXVnaHQgYW5kIGhhbmRsZWQgd2l0aGluIHRoZSBmdW5jdGlvblxuICAgIC8vICAgICAgICAgZXhwZWN0KGVycm9yLm1lc3NhZ2UpLnRvLmVxdWFsKCdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InKTtcbiAgICAvLyAgICAgfVxuXG4gICAgLy8gICAgIC8vIEV4cGVjdCBhbiBlcnJvciByZXNwb25zZSB0byBiZSBzZW50XG4gICAgLy8gICAgIGV4cGVjdChyZXMuanNvbi5jYWxsZWRPbmNlKS50by5iZS50cnVlO1xuICAgIC8vICAgICBleHBlY3QocmVzLmpzb24uY2FsbGVkV2l0aEV4YWN0bHkoeyBlcnJvcjogJ0VSUlJPcicgfSkpLnRvLmJlLnRydWU7XG4gICAgLy8gfSk7XG59KTsiXSwibWFwcGluZ3MiOiIwdklBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosS0FBTSxDQUFBRSxJQUFJLEVBQUFGLGFBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQzVCLEtBQU0sQ0FBQUMsUUFBUSxFQUFBTCxhQUFBLEdBQUFHLENBQUEsTUFBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUNyQyxLQUFNLENBQUFFLEtBQUssRUFBQU4sYUFBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDOUIsS0FBTSxDQUFBRyxNQUFNLEVBQUFQLGFBQUEsR0FBQUcsQ0FBQSxNQUFHRCxJQUFJLENBQUNLLE1BQU0sRUFDMUIsS0FBTSxDQUFBQyxHQUFHLEVBQUFSLGFBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUNKLGFBQUEsR0FBQUcsQ0FBQSxNQUMvQkQsSUFBSSxDQUFDTyxHQUFHLENBQUNKLFFBQVEsQ0FBQyxDQUNsQixLQUFNLENBQUVLLGlCQUFpQixDQUFD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